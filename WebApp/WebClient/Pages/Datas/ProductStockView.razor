@page "/data/stock"

@using ShareModels.ModelViews;
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using System.Text;

@inject IProductService productService
@inject IMerkService merkService
@inject IGudangService gudangService
@inject ApplicationDbContext _dbContext
@inject NavigationManager navManager




<div class="col-md-12">
    <RadzenFieldset Text="Data Real Stok">
        <div style="display:flex; justify-content:space-between">
            <div>
                <div class="form-group" style="display:flex; flex-direction:column; margin-right:20px">
                    <label>Gudang</label>
                    <RadzenDropDown TextProperty="Name" TValue="Gudang"
                                    Style="width:300px"
                                    ValueChanged="@((arg)=>SelectGudang(arg))"
                                    Data=@gudangs />
                </div>
                <div class="form-group" style="display:flex; flex-direction:column">
                    <label>Merk</label>
                    <RadzenDropDown TextProperty="Name" TValue="Merk"
                                    Style="width:300px"
                                    ValueChanged="@((arg)=>SelectMerk(arg))"
                                    Data=@merks />
                </div>
            </div>
            <RadzenButton Icon="print" Click="@(()=> { navManager.NavigateTo($"/report/PrintStockBarang/{gudangId}?merkid={merkId}", true); })" />
        </div>
        <RadzenGrid Data="@Stocks" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="ProductStock"
                    @ref="gridStock" LoadData="@LoadData" Count="@count" PageSize="12">
            <Columns>
                <RadzenGridColumn Width="180px" TItem="ProductStock" Property="CodeName" Title="Code" />
                <RadzenGridColumn TItem="ProductStock" Property="Name" Title="Product" />
                <RadzenGridColumn Width="75px" TItem="ProductStock" Property="Size" Title="Size" />
                <RadzenGridColumn Width="75px" TItem="ProductStock" Property="StockView" Title="Stock" />
                <RadzenGridColumn Width="150px" TItem="ProductStock" Title="Unit">
                    <Template Context="data">
                        <Radzen.Blazor.RadzenDropDown Data="data.Units"
                                                      TextProperty="Name" @bind-Value="data.SelectedUnit">

                        </Radzen.Blazor.RadzenDropDown>
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn Width="150px" Title="Nilai" TItem="ProductStock" TextAlign="TextAlign.Right">
                    <Template Context="data">
                        @((data.SelectedUnit.Sell * data.StockView).ToString("N2"))
                    </Template>
                    <FooterTemplate>
                        @Stocks.Where(x => merkId == 0 ? true : x.Merk.Id == merkId).Sum(x => x.SelectedUnit == null ? 0 : x.SelectedUnit.Sell * x.StockView).ToString("N2");
                    </FooterTemplate>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    </RadzenFieldset>
</div>

@code {

    RadzenGrid<ProductStock> gridStock;
    public IEnumerable<ProductStock> Stocks { get; set; } = new List<ProductStock>();
    public List<Merk> merks { get; set; } = new List<Merk>();
    public List<Gudang> gudangs { get; set; } = new List<Gudang>();
    int merkId = 0;
    int gudangId = 0;
    int count;
    bool withOrder;

    protected override async Task OnInitializedAsync()
    {
        gudangs.Add(new Gudang { Id = 0, Name = "All" });
        var guds = await gudangService.Get();

        foreach (var item in guds)
        {
            gudangs.Add(item);
        }

        merks.Add(new Merk { Id = 0, Name = "All" });
        var mer = await merkService.Get();

        foreach (var item in mer)
        {
            merks.Add(item);
        }



    }


    void SelectMerk(Merk data)
    {
        merkId = data.Id;
        gridStock.Reload();

    }


    void SelectGudang(Gudang data)
    {
        gudangId = data.Id;
        gridStock.Reload();
    }


    public StringContent GenerateHttpContent(object data)
    {
        var json = JsonConvert.SerializeObject(data);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        return content;
    }

    async Task LoadData(LoadDataArgs args)
    {

        try
        {
            Stocks = await productService.GetProductStockByGudangId(merkId, gudangId, withOrder);
            count = Stocks.Count();
         //   await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            throw new SystemException(ex.Message);
        }

    }
}
