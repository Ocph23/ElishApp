@page "/product/detail/{id?}";
@page "/product/add";

@attribute [Authorize]

@inject IProductService productService;
@inject NavigationManager nav;
@inject NotificationService NotificationService;
@inject ISupplierService supplierService;
@inject ICategoryService categoryService;



<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <h3>Detail Product</h3>
    </ol>
</nav>


<RadzenTemplateForm Data="model" Submit="@(async (Product prod)=> { await SaveProduct(model); })">
    <Radzen.Blazor.RadzenFieldset Text="Data Product">
        <div class="row">
            <div class="col-md-6">
                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Category" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="model.CategoryId" AllowClear="true" Placeholder="Select Category"
                                        Data="@categories" style="width: 60%;" TextProperty="Name" ValueProperty="Id" Name="CategoryId">
                        </RadzenDropDown>
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Supplier" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="model.SupplierId" AllowClear="true" Placeholder="Select Supplier"
                                        Data="@suppliers" style="width: 60%;" TextProperty="Nama" ValueProperty="Id" Name="SupplierId">
                        </RadzenDropDown>
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Product Name" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.Name" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Code Product" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.CodeName" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Code Article" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.CodeArticle" />
                    </div>
                </div>


            </div>

            <div class="col-md-6">

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Merk" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.Merk" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Size" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.Size" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Description" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextArea @bind-Value="model.Description" />
                    </div>
                </div>
            </div>



        </div>

        <hr />
        <div class="row text-center" style="margin:10px">

            <Radzen.Blazor.RadzenButton Icon="undo" Click="@(()=>GoBack())" ButtonStyle="ButtonStyle.Info" Style="margin:5px" />
            <Radzen.Blazor.RadzenButton Icon="save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Warning" Style="margin:5px" />
        </div>

    </Radzen.Blazor.RadzenFieldset>
    <hr />
    <RadzenFieldset Text="Harga Product">
        <Radzen.Blazor.RadzenButton ButtonType="ButtonType.Button" class="btn btn-success" Click="@(()=>AddItem())" Icon="add" Style="margin-bottom:10px" />
        <RadzenGrid @ref="unitGrid" Data="@(model.Units)" AllowFiltering="true"
                    AllowPaging="true" AllowSorting="true" TItem="Unit">
            <Columns>
                <RadzenGridColumn TItem="Unit" Property="Name" Title="Unit Name">
                    <EditTemplate Context="item">
                        <RadzenTextBox @bind-Value="item.Name" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Unit" Property="Level" Title="Level" Width="75px">
                    <EditTemplate Context="item">
                        <RadzenNumeric @bind-Value="item.Level" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Unit" Property="Amount" TextAlign="TextAlign.Right" Width="75px" Title="Amount">
                    <EditTemplate Context="item">
                        <RadzenNumeric @bind-Value="item.Amount" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="Unit" TextAlign="TextAlign.Right" Context="unit" Property="Buy" Title="Buy">
                    <Template>
                        @unit.Buy.ToString("N")
                    </Template>
                    <EditTemplate Context="item">
                        <RadzenNumeric @bind-Value="item.Buy" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="Unit" Context="unit" TextAlign="TextAlign.Right" Property="Sell" Title="Sell">
                    <Template>
                        @unit.Sell.ToString("N")
                    </Template>
                    <EditTemplate Context="item">
                        <RadzenNumeric @bind-Value="item.Sell" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Unit" Context="sampleBlazorModelsSampleOrder"
                                  Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="item">
                        <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditUnit(item))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="item">
                        <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => SaveUnit(item))">
                        </RadzenButton>
                        <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@((args) => CancelUnit(item))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenGridColumn>

            </Columns>
        </RadzenGrid>
    </RadzenFieldset>



</RadzenTemplateForm>


@code{
    [Parameter]
    public string id { get; set; }

    public Product model { get; set; }

    public IEnumerable<Category> categories;
    public IEnumerable<Supplier> suppliers;

    List<ButtonLitleSave> components = new List<ButtonLitleSave>();

    RadzenGrid<Unit> unitGrid;

    ButtonLitleSave ComponentRef
    {
        set { components.Add(value); }
    }

    protected override async Task OnInitializedAsync()
    {
        suppliers = await supplierService.GetSuppliers();
        categories = await categoryService.Get();

        if (!string.IsNullOrEmpty(id))
        {
            var Id = Convert.ToInt32(id);
            model = await productService.Get(Id);
        }
        else
        {
            model = new Product();
        }
    }


    public void AddItem()
    {
        model.Units.Add(new Unit { Amount = 1, Level = model.Units.Count, ProductId = model.Id });
        unitGrid.Reload();
    }

    public void OnChange(int id)
    {
        var com = components.Where(x => x.unit.Id == id).FirstOrDefault();
        if (com != null)
        {
            com.OnChange();
        }
    }

    public async Task SaveProduct(Product prod)
    {
        try
        {
            var saved = false;
            if (model.Id > 0)
            {
                var Id = Convert.ToInt32(id);
                saved = await productService.Update(Id, model);

            }
            else
            {
                var result = await productService.AddProduct(model.SupplierId, model);
                if (result != null)
                    saved = true;

            }

            if (saved)
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Data Berhasil Disimpan !",
                    Duration = 3000
                });

            else
                throw new SystemException("Data Not Saved !");
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 3000
            });
        }
    }

    public void GoBack()
    {
        nav.NavigateTo($"/product");
    }


    protected async Task OnButtonClickHandler(ChangeEventArgs e)
    {
        var paramss = (object[])e.Value;
        var btn = (ButtonLitleSave)paramss[0];
        var unit = (Unit)paramss[1];
        btn.IconName = "support";
        btn.IconStyle = "loader";
        Unit temUnit;
        if (unit.Id > 0)
        {
            temUnit = await productService.UpdateUnit(unit.Id, unit);
        }
        else
        {
            temUnit = await productService.AddUnit(model.Id, unit);
            if (temUnit != null)
            {
                unit = temUnit;
            }
        }

        if (temUnit != null)
        {
            btn.IconName = "check_circle";
            btn.IconStyle = "iconSuccess";
        }
        else
        {
            btn.IconName = "error_outline";
            btn.IconStyle = "iconError";
        }

        await Task.Delay(4000);
        btn.IconName = "";
        btn.IconStyle = "";
        StateHasChanged();
    }


    async Task SaveUnit(Unit unit)
    {

        Unit temUnit;
        if (unit.Id > 0)
        {
            temUnit = await productService.UpdateUnit(unit.Id, unit);
        }
        else
        {
            temUnit = await productService.AddUnit(model.Id, unit);
            if (temUnit != null)
            {
                unit = temUnit;
            }
        }

        await unitGrid.UpdateRow(unit);

        StateHasChanged();
    }

    void EditUnit(Unit item)
    {
        unitGrid.EditRow(item);
    }

    void CancelUnit(Unit item)
    {
        unitGrid.CancelEditRow(item);
    }
}