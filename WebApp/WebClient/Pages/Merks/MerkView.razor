@page "/merk"



@using ApsWebApp.Pages.Merks;

@inject NavigationManager nav;
@inject IMerkService merkService;
@inject DialogService DialogService;

@attribute [Authorize]


<Radzen.Blazor.RadzenFieldset >
    <FieldSetHeader Title="Data Merk"></FieldSetHeader>
    <RadzenButton ButtonType="ButtonType.Button" Click=@(args => DialogService.OpenAsync<EditMerk>($"Add Merk",
                        new Dictionary<string, object>() { { "model", new Merk()}, },
                        new DialogOptions())) Icon="add" ButtonStyle="ButtonStyle.Success" Style="margin:5px" />

    <RadzenGrid @ref="grid" Data="@merks" AllowFiltering="true" AllowPaging="true" AllowSorting="true">
        <Columns>
            <Radzen.Blazor.RadzenGridColumn Width="300" Property="Name" Title="Name" TItem="Merk" />
            <Radzen.Blazor.RadzenGridColumn Property="Description" Title="Description" TItem="Merk" />
            <Radzen.Blazor.RadzenGridColumn Width="60px" TItem="Merk">
                <Template Context="item">
                    <RadzenButton Click=@(args => DialogService.OpenAsync<EditMerk>($"Edit Merk",
                        new Dictionary<string, object>() { { "model", item}, },
                        new DialogOptions())) Icon="edit" ButtonStyle="ButtonStyle.Warning" sty />
                </Template>
            </Radzen.Blazor.RadzenGridColumn>
        </Columns>
    </RadzenGrid>

</Radzen.Blazor.RadzenFieldset>

@code {
    private ICollection<Merk> merks;

    RadzenGrid<Merk> grid;

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnClose += OnCloseDialog;
        merks = (await merkService.Get()).ToList();

    }



    public void OnCloseDialog(dynamic result)
    {
        if (result != null && ((object)result).GetType() == typeof(Merk))
        {
            Merk model = (Merk)result;

            if (merks == null)
                merks = new List<Merk>();


            merks.Add(model);

            grid.Reload();
            StateHasChanged();

        }

    }




}
