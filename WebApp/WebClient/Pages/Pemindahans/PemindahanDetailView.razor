@page "/pemindahan/detail";
@page "/pemindahan/detail/{id}";

@using ShareModels
@using ShareModels.ModelViews

@attribute [Authorize]
@inject IGudangService gudangService;
@inject IPemindahanService pemindahanService;
@inject IMerkService merkService;
@inject NotificationService notificationService;
@inject NavigationManager nav;
@inject IProductService productService


<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="@("Gudang")">
            <RadzenFieldset Text="Data Supplier">
                <div class="col-md-12  align-items-center d-flex">
                    <div class="col-md-6">

                        <div class="row" style="margin-top:5px">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Dari " />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown AllowClear="true" AllowFiltering="true" Style="width:90%"
                                                FilterCaseSensitivity="FilterCaseSensitivity.Default"
                                                Data=@gudangs TextProperty="Name" @bind-Value="model.Dari"
                                                Change="@(args=> { SelectGudangAsal(args); })" />
                            </div>
                        </div>

                        <div class="row" style="margin-top:5px">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Tujuan " />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown AllowClear="true" AllowFiltering="true" Style="width:90%"
                                                FilterCaseSensitivity="FilterCaseSensitivity.Default"
                                                Data=@gudangs.Where(x=>model.Dari==null?false: model.Dari.Id!=x.Id) TextProperty="Name" @bind-Value="model.Tujuan" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Tanggal Pemindahan" Style="margin-top:10px" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDatePicker @bind-Value="@model.WaktuPemindahan" Style="margin-top:10px" />
                            </div>
                        </div>
                    </div>
                </div>
            </RadzenFieldset>

            <RadzenFieldset Text="Data ">
                <div class="row col-md-8">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Merek" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@merks
                                        @bind-Value=@merkId
                                        TextProperty="Name" ValueProperty="Id" Style="width:400px" />
                    </div>
                </div>
                <div class="row col-md-8">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Product" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@products.Where( item=> merkId<=0?true: item.Merk.Id==merkId && !model.Items.Any(data=> data.Product.Id.Equals(item.Id)))
                                        @bind-Value=@product
                                        TextProperty="CodeName"
                                        Change=@(args => SelectProduct(args)) Style="width:400px" />
                    </div>
                </div>

                <RadzenGrid @ref="pemindahanGrid" Data="@(model.Items)" AllowFiltering="true"
                            AllowSorting="true" TItem="PemindahanItem">
                    <Columns>
                        <RadzenGridColumn Width="180px" TItem="PemindahanItem" Property="Product.CodeName" Title="Code" />
                        <RadzenGridColumn TItem="PemindahanItem" Property="Product.Name" Title="Product" />
                        <RadzenGridColumn Width="100px" TItem="PemindahanItem" TextAlign="TextAlign.Right" Context="data" Property="Quntity" Title="Quntity">
                            <Template Context="item">
                                <RadzenNumeric TValue="double" @bind-Value="item.Quantity" Step="1" Change=@(args => OnChangeOrderItem(args, item)) />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="130px" TItem="PemindahanItem" Property="Unit.Name" Title="Unit">
                            <EditTemplate Context="item">
                                <RadzenDropDown @bind-Value="item.Unit" Data="@item.Product.Units"
                                                Change=@(args => OnChangeOrderItem(args, item))
                                                TextProperty="Name" Style="width:100%" />
                            </EditTemplate>
                        </RadzenGridColumn>

                        <RadzenGridColumn TItem="PemindahanItem" Context="sampleBlazorModelsSampleOrder"
                                          Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                            <HeaderTemplate>
                                <RadzenCheckBox TValue="bool" ValueChanged="@((x)=>OnCheckChange(x))" />
                            </HeaderTemplate>
                            <Template Context="order">
                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="order">
                                <RadzenButton Icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Click="@((args) => SaveRow(order))">
                                </RadzenButton>
                                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger"
                                              Click="@((args) => CancelEdit(order))">
                                </RadzenButton>
                            </EditTemplate>

                            <FooterTemplate>
                                <RadzenButton Click=@(args => nav.NavigateTo("/pembelian")) Icon="cancel" ButtonStyle="ButtonStyle.Warning" />
                                <RadzenButton Click=@(args => Save(model)) Icon="save" ButtonStyle="ButtonStyle.Success" />
                            </FooterTemplate>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenFieldset>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Keterangan/Catatan">
            <div class="col-md-6" style="text-align:right">
                <div class="row" style="margin-top:5px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Keterangan/Catatan" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextArea @bind-Value="model.Description" Style="width:90%" />
                    </div>

                </div>
            </div>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>



@code{

    [Parameter]
    public string id { get; set; }

    public IEnumerable<Gudang> gudangs = new List<Gudang>();
    public IEnumerable<ProductStock> products = new List<ProductStock>();
    public IEnumerable<Merk> merks = new List<Merk>();
    public ProductStock product;
    Gudang asal;




    int merkId;

    Pemindahan model = new Pemindahan() { Created = DateTime.Now, WaktuPemindahan = DateTime.Now, Items = new List<PemindahanItem>() };

    private RadzenGrid<PemindahanItem> pemindahanGrid;



    void OnCheckChange(bool check)
    {
        foreach (var item in model.Items)
        {
            if (check)
                pemindahanGrid.EditRow(item);

            else
            {
                pemindahanGrid.UpdateRow(item);
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        int Id;
        gudangs = await gudangService.Get();
        merks = await merkService.Get();
        if (Int32.TryParse(id, out Id))
        {
            model = await pemindahanService.Get(Id);
        }



    }




    async Task Save(Pemindahan model)
    {
        try
        {
            if (model.Id <= 0)
            {
                var result = await pemindahanService.Post(model);
                if(result != null)
                {
                    notificationService.Notify(new NotificationMessage
                    {
                        Detail = $"Data Tersimpan !",
                        Severity = NotificationSeverity.Success
                    });

                    return;
                }
            }
            else
            {
                var result = await pemindahanService.Put(model.Id, model);
                if (result)
                {
                    notificationService.Notify(new NotificationMessage
                    {
                        Detail = $"Data Tersimpan !",
                        Severity = NotificationSeverity.Success
                    });

                    return;
                }
            }

            throw new SystemException("Data Tidak Tersimpan !");

        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
            {
                Detail =ex.Message,
                Severity = NotificationSeverity.Error
            });
        }
    }

    async Task SelectGudangAsal(object data)
    {
        asal = data as Gudang;
        if(asal!=null)
            products = await productService.GetProductStockByGudangId(merkId, asal.Id, true);
    }


    async Task SelectMerk(object data)
    {
        var merk = data as Merk;
        if (merk != null)
        {
            merkId = merk.Id;
            products = await productService.GetProductStockByGudangId(merkId, asal.Id, true);
        }
    }


    async Task SelectProduct(object value)
    {
        var product = (Product)value;
        if (product != null)
        {
            var _product = products.Where(x => x.Id == product.Id).FirstOrDefault();
            if (_product != null && model.Items.Where(x => x.Product.Id == _product.Id).FirstOrDefault() == null)
            {
                var item = new PemindahanItem { Product = _product, Quantity = 1, Unit = product.UnitSelected };
                item.Unit = _product.Units.OrderBy(x => x.Level).FirstOrDefault();
                if (model.Items == null)
                    model.Items = new List<PemindahanItem>();
                model.Items.Add(item);
            }
        }
        product = null;
        await pemindahanGrid.Reload();

    }



    private async Task OnChangeOrderItem(object arg, PemindahanItem item)
    {
        if (arg.GetType() == typeof(Unit))
        {
            var unit = (Unit)arg;
            if (unit != null)
            {
                item.Unit = unit;
            }
            await Task.Delay(100);
        }


        var productStok = products.Where(x => x.Id == item.Product.Id).FirstOrDefault();
        if (productStok != null)
        {
            var readyStok = productStok.Stock / item.Unit.Quantity;
            if (item.Quantity > readyStok)
            {
                notificationService.Notify(new NotificationMessage
                {
                    Detail = $"Stock {productStok.CodeName} Tidak Cukup !  Sisa Stock = {readyStok} {item.Unit.Name}",
                    Severity = NotificationSeverity.Error
                });
                item.Quantity = readyStok;
            }
        }

        StateHasChanged();
    }




    private void RemoveItem(PemindahanItem item)
    {
        model.Items.Remove(item);

    }
    private void Cancel()
    {
        model = new Pemindahan();
        products = new List<ProductStock>();
    }


    void EditRow(PemindahanItem item)
    {
        pemindahanGrid.EditRow(item);
    }
    void SaveRow(PemindahanItem item)
    {
        pemindahanGrid.UpdateRow(item);
    }

    async Task CancelEdit(PemindahanItem item)
    {
        model.Items.Remove(item);
        await pemindahanGrid.Reload();
    }


}
