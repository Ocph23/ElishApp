@page "/supplier/addproduct/{id?}";


@attribute [Authorize]

@inject IProductService productService;
@inject NavigationManager nav;
@inject NotificationService NotificationService;
@inject ISupplierService supplierService;
@inject ICategoryService categoryServices;

@inject DialogService Dialog;


<nav aria-label="breadcrumb">
    <div class="breadcrumb">
        <h3>Add Product</h3>
    </div>
</nav>



<RadzenTemplateForm Data="model" OnInvalidSubmit=@OnInvalidSubmit Submit="@(async (Product prod)=> { await SaveProduct(model); })">
    <Radzen.Blazor.RadzenFieldset Text="Data Product">
        <div class="row">
            <div class="col-md-6">
                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Category" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown @bind-Value="model.CategoryId" AllowClear="true" Placeholder="Select Category"
                                        Data="@categories" style="width: 70%;" TextProperty="Name" ValueProperty="Id" Name="CardId">
                        </RadzenDropDown>
                        <RadzenNumericRangeValidator Component="CardId" Min="1" Text="Select a Category" Popup=true Style="position: absolute" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Product Name" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.Name" Name="Name" Style="width:70%" />
                        <RadzenRequiredValidator Component="Name" Text="product Name is required" Popup=true Style="position: absolute" />
                    </div>
                </div>

                <div class="row" style="margin-top:5px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Code Product" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.CodeName" Name="CodeName" />
                        <RadzenRequiredValidator Component="CodeName" Text="Code Name is required" Popup=true Style="position: absolute" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Code Article" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.CodeArticle" />
                    </div>
                </div>


            </div>

            <div class="col-md-6">

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Merk" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.Merk" style="width: 70%;" Name="Merk" />
                        <RadzenRequiredValidator Component="Merk" Text="Merk is required" Popup=true Style="position: absolute" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Size" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="model.Size" Name="Size" />
                        <RadzenRequiredValidator Component="Size" Text="Code Name is required" Popup=true Style="position: absolute" />
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Description" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextArea @bind-Value="model.Description" style="width: 70%;" />
                    </div>
                </div>
            </div>



        </div>

        <hr />

        <RadzenFieldset Text="Harga Product">
            <Radzen.Blazor.RadzenButton ButtonType="ButtonType.Button" class="btn btn-success" Click="@(()=>AddItem())"
                                        Style="margin-bottom:5px" Icon="add">
                
            </Radzen.Blazor.RadzenButton>

            <RadzenGrid @ref="unitGrid" Data="model.Units" >
                <Columns >
                    <RadzenGridColumn  TItem="Unit" Title="Level" Property="Level" Width="75px">
                        <EditTemplate Context="data">
                            @data.Level
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Unit" Title="Name" Property="Name" >
                        <EditTemplate Context="data">
                            <RadzenTextBox Value="@data.Name" ValueChanged="@((v)=> { data.Name = v; OnChange( data); })" />
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Unit" Title="Amount" Property="Amount" Width="75px">
                        <EditTemplate Context="data">
                            <RadzenNumeric  Value="data.Amount" TValue="double" ValueChanged="@((v)=> { data.Amount = v; OnChange( data); })" />
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Unit" Title="Buy" Property="Buy" Width="150px">
                        <EditTemplate Context="data">
                            <RadzenNumeric Value="data.Buy" TValue="double" Name="@($"buy{data.Level}")" ValueChanged="@((v)=> { data.Buy = v; OnChange( data); })" />
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Unit" Title="Sell" Property="Sell" Width="150px">
                        <EditTemplate Context="data">
                            <RadzenNumeric Value="data.Sell" Name="@($"sell{data.Level}")" TValue="double" ValueChanged="@((v)=> { data.Sell = v; OnChange( data); })" />
                        </EditTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Unit" Title="" Property="" Width="100px" >
                        <Template Context="data">
                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" ButtonType="ButtonType.Button"  Click="@(async ()=> { await unitGrid.EditRow(data); })" />
                        </Template>
                        <EditTemplate Context="data">
                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="save" ButtonType="ButtonType.Button" Click="@(async ()=> { 

                                                                                                                                    if(!string.IsNullOrEmpty(data.Name)&&data.Buy>0 && data.Sell>0)
                                                                                                                                        await unitGrid.UpdateRow(data);
                                                                                                                                })" />
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" ButtonType="ButtonType.Button" Click="@(async ()=> { await DeleteUnit(data); })" />
                        </EditTemplate>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </RadzenFieldset>
            <hr />
            <div class="row text-center" style="margin:10px">
                <Radzen.Blazor.RadzenButton Icon="undo" Click="@(()=>GoBack())" ButtonStyle="ButtonStyle.Info" Style="margin:5px" />
                <Radzen.Blazor.RadzenButton Visible=@(model.Units.Count>0) Icon="save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Warning" Style="margin:5px" />
            </div>
    </Radzen.Blazor.RadzenFieldset>

</RadzenTemplateForm>

@code{

    [Parameter]
    public string id { get; set; }

    public Product model { get; set; } = new Product();

    public IEnumerable<Category> categories { get; set; }

    List<ButtonLitleSave> components = new List<ButtonLitleSave>();

    RadzenGrid<Unit> unitGrid;

    ButtonLitleSave ComponentRef
    {
        set { components.Add(value); }
    }



    protected override async Task OnInitializedAsync()
    {

        categories = await categoryServices.Get();
        model = new Product() { Units = new List<Unit>() };
    }


    public async Task AddItem()
    {
        var data = new Unit { Amount = 1, Level = model.Units.Count, ProductId = model.Id };
        model.Units.Add(data);
        await unitGrid.EditRow(data);
        await unitGrid.Reload();
    }

    public Task OnChange(Unit unit)
    {
        var com = components.Where(x => x.unit == unit).FirstOrDefault();
        if (com != null)
        {
            com.OnChange();
        }

        return Task.CompletedTask;
    }


    public async Task DeleteUnit(Unit unit)
    {
        await Task.Delay(10);
        model.Units.Remove(unit);
        await unitGrid.Reload();
    }

    public async Task SaveProduct(Product prod)
    {
        try
        {
            bool unitValid =true;
            foreach (var item in prod.Units)
            {
                if (unitGrid.IsRowInEditMode(item))
                    unitValid= false;
            }

            if (!unitValid)
            {
                throw new SystemException("Lengkapi Data Unit !");
            }

            var saved = false;
            if (model.Id > 0)
            {
                saved = await productService.Update(model.Id, model);
            }
            else
            {
                var Id = Convert.ToInt32(id);
                var result = await productService.AddProduct(Id, model);
                if (result != null)
                {
                    saved = true;
                    model.Id = result.Id;
                }

            }


            if (saved)
            {
                var resultDoalog = await Dialog.Confirm("Data Berhasil Disimpan !, \r\n Input Product Baru ?", "Success", new ConfirmOptions() { OkButtonText = "Ya", CancelButtonText = "Tidak" });
                if(resultDoalog!=null && resultDoalog== true)
                {
                    model = new Product() { Units = new List<Unit>() };
                }
            }
            else
            { throw new SystemException("Data Not Saved !"); }

            StateHasChanged();
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 3000
            });
        }
    }

    public void GoBack()
    {
        nav.NavigateTo($"/supplier/products/{id}");
    }

    protected async Task OnButtonClickHandler(ChangeEventArgs e)
    {
        var paramss = (object[])e.Value;
        var btn = (ButtonLitleSave)paramss[0];
        var unit = (Unit)paramss[1];
        await unitGrid.UpdateRow(unit);
        StateHasChanged();
    }


    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //  console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }
}