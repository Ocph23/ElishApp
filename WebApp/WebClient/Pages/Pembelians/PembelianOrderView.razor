@page "/pembelian/order"
@inject IPembelianService pembelianService;
@inject NavigationManager nav;
@inject NotificationService NotificationService;
@inject NavigationManager Nav;
@inject DialogService dialog;

@attribute [Authorize]

    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Data Order Pembelian">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add" Click=@(args => Nav.NavigateTo("/pembelian/order/detail")) Style="margin-bottom:10px" />
             
                <RadzenGrid Data="@orders.Where(e=> (Int32)currentTOC >= -1 ?e.Status==currentTOC:true)"
                            AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="Orderpembelian">
                    <Columns>
                        <Radzen.Blazor.RadzenGridColumn Width="200px" TItem="Orderpembelian" Title="Order Date" Property="OrderDate" />
                        <Radzen.Blazor.RadzenGridColumn Width="200px" TItem="Orderpembelian" Title="PO Number" Property="Nomor" />
                        <Radzen.Blazor.RadzenGridColumn TItem="Orderpembelian" Title="Supplier" Property="Supplier.Nama" />
                        <Radzen.Blazor.RadzenGridColumn Width="100px" TItem="Orderpembelian" TextAlign="TextAlign.Center" Context="item" Title="Discount" Property="Discount">
                            <Template>
                                @(item.Discount + "%")
                            </Template>
                        </Radzen.Blazor.RadzenGridColumn>
                        <Radzen.Blazor.RadzenGridColumn Width="120px" TItem="Orderpembelian" Title="Status" Property="Status">
                            <FilterTemplate>
                                <RadzenDropDown @bind-Value="@currentTOC" TextProperty="Text"
                                                ValueProperty="Value" Style="width:100%"
                                                Data="@(Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>().Select(t => new { Text = $"{t}", Value = t }))" />
                            </FilterTemplate>
                        </Radzen.Blazor.RadzenGridColumn>
                        <Radzen.Blazor.RadzenGridColumn TItem="Orderpembelian" Width="100px">
                            <Template Context="item">
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="list" Click=@(args => Nav.NavigateTo($"pembelian/order/detail/{item.Id}")) />
                                @if (item.Status == OrderStatus.New)
                                {
                                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add" Click=@(args => CreatePembelian(item.Id)) />
                                }
                                else if (item.Status == OrderStatus.Proccess)
                                {

                                }
                            </Template>
                        </Radzen.Blazor.RadzenGridColumn>
                    </Columns>
                </RadzenGrid>

            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

    @code{


        OrderStatus currentTOC;
        private IEnumerable<Orderpembelian> orders;
        protected override async Task OnInitializedAsync()
        {
            orders = await pembelianService.GetOrders();
        }

        private async Task CreatePembelian(int orderId)
        {
            try
            {
                var resultDialog = await dialog.Confirm("Yakin Buat Pembelian ? ","Buat Pembelian", new ConfirmOptions { OkButtonText="Ya", CancelButtonText="Tidak" }  );
                if (resultDialog!=null && resultDialog==true)
                {
                    var result = await pembelianService.CreatePembelian(orderId);
                    if (result != null)
                    {
                        Nav.NavigateTo($"/pembelian/realisasi/detail/{result.Id}");
                    }
                }
            }
            catch (System.Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 3000
                });
            }

        }

    }
