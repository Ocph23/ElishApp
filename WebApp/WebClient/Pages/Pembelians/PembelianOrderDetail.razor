@page "/pembelian/order/detail/{id?}";
@using ShareModels
@using WebClient.Services;

@attribute [Authorize]

@inject ISupplierService supplierService;
@inject IPembelianService pembelianService;
@inject IProductService productService;
@inject NotificationService NotificationService;
@inject NavigationManager nav;


    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="@(@title +"Order Pembelian")">

                    <RadzenFieldset Text="Data Supplier">
                        <div class="col-md-12  align-items-center d-flex">
                            <div class="col-md-8">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Suplier" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.Default" Data=@suppliers @bind-Value=@model.SupplierId
                                                    TextProperty="Nama" ValueProperty="Id"
                                                    Change=@(args => SelectSupplier(args, "Supplier")) />
                                </div>

                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Discount (%)" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenNumeric @bind-Value="model.Discount" TValue="double" Placeholder="0.0" Step="0.5" />
                                </div>

                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Status" Style="margin-top:10px" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox Disabled=true Value="@model.Status.ToString()" Style="margin-top:10px" />
                                </div>
                            </div>
                            <div class="col-md-4" style="text-align:right">
                                <a class="btn btn-info" href="/report/OrderPembelianExcel/@model.Id">
                                <i style="font-size:24px" class="material-icons">cloud_download</i> Download</a>
                            </div>
                        </div>
                    </RadzenFieldset>

                <div class="col-md-12">
                    <RadzenFieldset Text="Data Orders">
                        <div class="row col-md-8">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Cari Product" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Data=@products.Where(item=> !model.Items.Any(data=> data.ProductId.Equals(item.Id)))
                                                @bind-Value=@product.Id
                                                TextProperty="CodeName" ValueProperty="Id"
                                                Change=@(args => SelectProduct(args, "Supplier")) />
                            </div>
                        </div>

                        <RadzenGrid @ref="ordersGrid" Data="@(model.Items)" AllowFiltering="true" 
                                    AllowSorting="true" TItem="OrderpembelianItem">
                            <Columns>
                                <RadzenGridColumn Width="120px" TItem="OrderpembelianItem" Property="Product.CodeArticle" Title="Article" />
                                <RadzenGridColumn Width="180px" TItem="OrderpembelianItem" Property="Product.CodeName" Title="Code" />
                                <RadzenGridColumn TItem="OrderpembelianItem" Property="Product.Name" Title="Product" />
                                <RadzenGridColumn Width="75px" TItem="OrderpembelianItem" TextAlign="TextAlign.Right" Context="data" Property="Amount" Title="Amount">
                                    <EditTemplate Context="item">
                                        <RadzenNumeric TValue="double" @bind-Value="item.Amount" Step="1" Change=@(args => OnChangeOrderItem(args, item)) />
                                    </EditTemplate>
                                </RadzenGridColumn>
                                <RadzenGridColumn Width="100px" TItem="OrderpembelianItem" Property="Unit.Name" Title="Unit">
                                    <EditTemplate Context="item">
                                        <RadzenDropDown @bind-Value="item.UnitId" Data="@item.Product.Units"
                                                        Change=@(args => OnChangeOrderItem(args, item))
                                                        TextProperty="Name" ValueProperty="Id" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenGridColumn>
                                <RadzenGridColumn Width="100px" TItem="OrderpembelianItem" TextAlign="TextAlign.Right" Property="Price" Title="Price">
                                    <EditTemplate Context="item">
                                        <RadzenNumeric @bind-Value="item.Price" Step="0.25" />
                                    </EditTemplate>
                                    <FooterTemplate>
                                        <div>Total</div>
                                        <div>Discount</div>
                                        <div>Total Payment </div>
                                    </FooterTemplate>
                                </RadzenGridColumn>
                                <RadzenGridColumn Width="150px" TItem="OrderpembelianItem" Property="Total" TextAlign="TextAlign.Right" Title="Total">
                                    <FooterTemplate>
                                        @{
                                            <div>@model.Total.ToString("N")</div>
                                            var total = model.Total * (model.Discount / 100);
                                            <div>@total.ToString("N")</div>
                                            <div>@((model.Total-total).ToString("N"))</div>

                                        }
                                    </FooterTemplate>
                                </RadzenGridColumn>

                                <RadzenGridColumn TItem="OrderpembelianItem" Context="sampleBlazorModelsSampleOrder" Visible="@(model.Items.Count>0  && ((Int32)model.Status < 1))"
                                                  Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                                    <HeaderTemplate>
                                        <RadzenCheckBox Value="@(checkall)" TValue="bool" ValueChanged="@((x)=>OnCheckChange(x))" />
                                    </HeaderTemplate>
                                    <Template Context="order">
                                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="order">
                                        <RadzenButton Icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Click="@((args) => SaveRow(order))">
                                        </RadzenButton>
                                        <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger"
                                                      Click="@((args) => CancelEdit(order))">
                                        </RadzenButton>
                                    </EditTemplate>

                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => nav.NavigateTo("/pembelian")) Icon="cancel" ButtonStyle="ButtonStyle.Warning" />
                                        <RadzenButton Visible="@(model.Items.Count>0  && ((Int32)model.Status < 1))" Click=@(args => Save(model)) Icon="save" ButtonStyle="ButtonStyle.Success" />
                                    </FooterTemplate>
                                </RadzenGridColumn>
                            </Columns>
                        </RadzenGrid>
                    </RadzenFieldset>
                </div>


            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>



@code{

    [Parameter]
    public string id { get; set; }

    string title;

    private Product product = new Product();
    private IEnumerable<Supplier> suppliers;
    private IEnumerable<Product> products = new List<Product>();


    private Orderpembelian model = new Orderpembelian() { Items = new List<OrderpembelianItem>() };

    private RadzenGrid<OrderpembelianItem> ordersGrid;

    bool checkall;

    void OnCheckChange(bool data)
    {
        checkall = !checkall;

        foreach (var item in model.Items)
        {
            if (checkall)
                ordersGrid.EditRow(item);

            else
            {
                ordersGrid.UpdateRow(item);
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {
        suppliers = await supplierService.GetSuppliers();
        if (!string.IsNullOrEmpty(id))
        {
            int paramId = Convert.ToInt32(id);
            if (paramId > 0)
            {
                this.model = await pembelianService.GetOrder(paramId);
                if (model != null)
                    products = await productService.GetProductsBySupplier(model.SupplierId);
            }

        }
        else
        {
            title = "Create";
        }

    }

    async Task SelectSupplier(object value, string name)
    {
        var suppId = (int)value;
        model = new Orderpembelian() { SupplierId = suppId, Items = new List<OrderpembelianItem>() };
        products = await productService.GetProductsBySupplier(suppId);
    }


   


    private void RemoveItem(OrderpembelianItem item)
    {
        model.Items.Remove(item);

    }
    private void Cancel()
    {
        model = new Orderpembelian();
        products = new List<Product>();
    }


    void EditRow(OrderpembelianItem item)
    {
        ordersGrid.EditRow(item);
    }
    void SaveRow(OrderpembelianItem item)
    {
        ordersGrid.UpdateRow(item);
    }

    async Task CancelEdit(OrderpembelianItem item)
    {
        model.Items.Remove(item);
        await ordersGrid.Reload();
    }


    private async Task Save(Orderpembelian model)
    {

        try
        {
            Orderpembelian result;
            if (model.Id <= 0)
            {
                model.OrderDate = DateTime.Now;
                result = await pembelianService.CreateOrder(model);
                if (result != null)
                    model.Id = result.Id;
            }
            else
            {
                result = await pembelianService.UpdateOrder(model.Id, model);
            }

            if (result != null)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Order Berhasil Dibuat !",
                    Duration = 3000
                });

                nav.NavigateTo("/pembelian/order");
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 3000
            });
        }

    }

    async Task SelectProduct(object value, string name)
    {
        var prodId = (int)value;
        var _product = products.Where(x => x.Id == prodId).FirstOrDefault();
        if (_product != null && model.Items.Where(x => x.ProductId == _product.Id).FirstOrDefault() == null)
        {
            var item = new OrderpembelianItem { Product = _product, ProductId = prodId, Amount = 1 };
            item.Unit = _product.Units.FirstOrDefault();
            item.UnitId = item.Unit.Id;
            if (model.Items == null)
                model.Items = new List<OrderpembelianItem>();
            model.Items.Add(item);
        }


        product = new Product();
        await ordersGrid.Reload();
    }



    private async Task SelectUnit(object arg, OrderpembelianItem product)
    {

        var unitId = (Int32)arg;
        var unit = product.Product.Units.Where(x => x.Id == unitId).FirstOrDefault();
        if (unit != null)
        {
            product.Unit = unit;
            product.Price = unit.Buy;
        }
        await Task.Delay(100);

        StateHasChanged();
    }



    private async Task OnChangeOrderItem(object arg, OrderpembelianItem item)
    {
        if (arg.GetType() == typeof(Int32))
        {
            var unitId = (Int32)arg;
            var unit = item.Product.Units.Where(x => x.Id == unitId).FirstOrDefault();
            if (unit != null)
            {
                item.Unit = unit;
                item.Price = unit.Buy;
            }
            await Task.Delay(100);
        }


        @*var productStok = products.Where(x => x.Id == item.ProductId).FirstOrDefault();
            if (productStok != null)
            {
                var readyStok = productStok.Stock / item.Unit.Amount;
                if (item.Amount > readyStok)
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Detail = $"Stock {productStok.CodeName} Tidak Cukup \r Sisa Stock = {readyStok} {item.Unit.Name}",
                        Severity = NotificationSeverity.Error
                    });
                    item.Amount = readyStok;
                }
            }*@


        StateHasChanged();
    }


}
