@page "/pembelian/order/create";
@using ShareModels
@using WebClient.Services;

@inject ISupplierService supplierService;
@inject IPembelianService pembelianService;
@inject IProductService productService;
@inject NotificationService NotificationService;

<nav aria-label="breadcrumb">
      <h3>Create Order Pembelian</h3>
</nav>

<div class="col-md-6">
    <RadzenFieldset Text="Data Supplier">
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Suplier" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown AllowClear="true" AllowFiltering="true" 
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@suppliers @bind-Value=@supplier.Id
                    TextProperty="Nama" ValueProperty="Id" Style="width:400px" 
                    Change=@(args => SelectSupplier(args, "Supplier")) />
            </div>

              <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Discount" />
            </div>
            <div class="col-md-8">
                <RadzenNumeric @bind-Value="model.Discount" TValue="double" Placeholder="0.0" Step="0.1"/> %
            </div>
        </div>

    </RadzenFieldset>
</div>

<div class="col-md-12">
    <RadzenFieldset Text="Data Orders">
        <div class="row col-md-6">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Cari Product" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown AllowClear="true" AllowFiltering="true" 
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@products @bind-Value=@product.Id
                    TextProperty="CodeName" ValueProperty="Id" Style="width:400px" 
                    Change=@(args => SelectProduct(args, "Supplier")) />
            </div>
        </div>

        <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Code Product</th>
                <th scope="col">Product Name</th>
                <th scope="col">Code Article</th>
                <th scope="col">Amount</th>
                <th scope="col">Unit</th>
                <th scope="col">Price</th>
                <th scope="col">Total</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @if (model != null && model.Items != null)
            {
                foreach (OrderpembelianItem item in model.Items)
                {
                    <tr>
                        <th scope="row">1</th>
                        <td>
                            <RadzenTextBox @bind-Value="item.Product.CodeName" type="text"/></td>
                        <td><RadzenTextBox @bind-Value="item.Product.Name" type="text" /></td>
                        <td><RadzenTextBox @bind-Value="item.Product.CodeArticle" type="text" /></td>
                        <td><RadzenNumeric @bind-Value="item.Amount" TValue="double" Placeholder="0.0" Step="0.25"/></td>
                        <td>
                            <RadzenDropDown AllowClear="true" AllowFiltering="true" 
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@item.Product.Units @bind-Value=@item.UnitId
                            TextProperty="Name" ValueProperty="Id"  Change=@(args => SelectUnit(args, item)) />
                            </td>
                      
                        <td><RadzenNumeric @bind-Value="item.Price" TValue="double" Placeholder="0.0" Step="0.25"/></td>
                        <td><RadzenLabel Text="@item.Total.ToString("N")"/>    </td>
                        <td> <RadzenButton Click=@(args => RemoveItem(item)) Icon="close" Style="margin-top: 0px; width: 40px" /></td>
                    </tr>
                   
                }


                if(model!=null && model.Items.Count>0){

                 <tr>
                         <th scope="row" colspan="6"></th>
                         <th scope="row" colspan="1">Total</th>
                         <th scope="row" >@model.Total.ToString("N")</th>
                 </tr>
                 <tr>
                         <th scope="row" colspan="6"></th>
                         <th scope="row" colspan="1">Discount @model.Discount.ToString()%</th>
                         <th scope="row" >@{ var total = model.Total * (model.Discount/100); @total.ToString("N")}</th>
                 </tr>
                   <tr>
                         <th scope="row" colspan="6"></th>
                         <th scope="row" colspan="1">Grand Total</th>
                          <th scope="row" >@{ var grandTotal = model.Total - total; @grandTotal.ToString("N")}</th>
                 </tr>


                  <tr>
                        <th scope="row" colspan="7"></th>
                        <td colspan="3" style="display: flex;"> <RadzenButton Click=@(args => Cancel()) Text="Batal" Icon="cancel" ButtonStyle="ButtonStyle.Warning" />
                            <RadzenButton Click=@(args => Save(model)) Text="Simpan" Icon="save" ButtonStyle="ButtonStyle.Success" />
                        </td>
                 </tr>

                 
                }


                
            }
            </tbody>
        </table>

       


    </RadzenFieldset>



   
</div>


@code{
      private Product product = new Product();
    private Supplier supplier = new Supplier();
    private IEnumerable<Supplier> suppliers;
    private IEnumerable<Product> products = new List<Product>();

    private Orderpembelian model = new Orderpembelian(){Items=new List<OrderpembelianItem>()};

   async Task  SelectSupplier(object value, string name)
    {
       var suppId= (int)value;
       model = new Orderpembelian(){SupplierId=suppId, Items=new List<OrderpembelianItem>()};
       products = await productService.GetProductsBySupplier(suppId);
    }



    private void RemoveItem(OrderpembelianItem item){
        model.Items.Remove(item);

    }
    private void Cancel(){
        model = new Orderpembelian();
        products= new List<Product>();
    }


    private async Task Save(Orderpembelian model){
       
       try
       {
           model.OrderDate= DateTime.Now;
            var result = await pembelianService.CreateOrder(model);
            if(result!=null)
            {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Order Berhasil Dibuat !",
                    Duration = 3000
                });
            }
       }
       catch (System.Exception ex)
       {
             NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 3000
            });
       }

    }




   async Task SelectProduct(object value, string name)
    {
       var prodId= (int)value;
        var _product = products.Where(x=>x.Id==prodId).FirstOrDefault();      
        if(_product!=null && model.Items.Where(x=>x.ProductId==_product.Id).FirstOrDefault()==null){
           var item= new OrderpembelianItem{ Product=_product, ProductId=prodId, Amount=1 };
           item.Unit = _product.Units.FirstOrDefault();  
           item.UnitId = item.Unit.Id;
           if(model.Items==null)
            model.Items= new List<OrderpembelianItem>();
            model.Items.Add(item);
        }
      
      
        product=new Product();
        await Task.Delay(100);
    }



    private async Task SelectUnit(object arg, OrderpembelianItem product){

        var unitId= (Int32)arg;
        var unit = product.Product.Units.Where(x=>x.Id==unitId).FirstOrDefault();
        if(unit!=null){
            product.Unit=unit;
            product.Price=unit.Buy;
        }
        await Task.Delay(100);

          StateHasChanged();
    }

  

    protected override async Task OnInitializedAsync()
    {
        suppliers = await supplierService.GetSuppliers();
    }


}