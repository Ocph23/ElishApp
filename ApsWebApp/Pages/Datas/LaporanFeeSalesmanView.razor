@page "/data/feesalesman"

@using ShareModels.ModelViews;
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext dbContext

<h3 style="margin-bottom:20px">Laporan Fee Salesman </h3>
<div class="row">
    <div class="col-md-6">
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Dari</label>
            <div class="col-sm-10">
                <RadzenDatePicker Change="@(()=>GetData())" @bind-Value="start" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Sampai</label>
            <div class="col-sm-9">
                <RadzenDatePicker Change="@(()=>GetData())" @bind-Value="endDate" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Salesman</label>
            <div class="col-sm-9">
                <Radzen.Blazor.RadzenDropDown Data="karyawans" TValue="Karyawan" TextProperty="Name" @bind-Value="SelectedKaryawan" />
            </div>
        </div>
    </div>
    <div class="col-md-6">
      
    </div>
</div>
<div class="row">
     
    <RadzenGrid Data="penjualans" AllowFiltering="true" AllowSorting="true">
        <Columns>
            <RadzenGridColumn Title="Tgl" TItem="PenjualanAndOrderModel" Property="Created" Width="95px">
                <Template Context="item">
                    @item.Created.ToString("dd/MM/yyyy")
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn Title="Invoice" TItem="PenjualanAndOrderModel" Property="Invoice" Width="160px"></RadzenGridColumn>
            <RadzenGridColumn Title="SO" TItem="PenjualanAndOrderModel" Property="NomorSO" Width="160px"></RadzenGridColumn>
            <RadzenGridColumn Title="Pelanggan" TItem="PenjualanAndOrderModel" Property="Customer"></RadzenGridColumn>
            <RadzenGridColumn Title="Penjualan" TItem="PenjualanAndOrderModel" Property="TotalAfterDiscount" TextAlign="TextAlign.Right" Width="170px">
                <Template Context="item">
                    @item.TotalAfterDiscount.ToString("N2")
                </Template>
                <FooterTemplate>
                    @penjualans.Sum(x => x.TotalAfterDiscount).ToString("N2");
                </FooterTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn Title="Fee" TItem="PenjualanAndOrderModel" Property="Discount" TextAlign="TextAlign.Right" Width="70px">
                <Template Context="item">
                    @item.FeeSales.ToString("N0") %
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn Title="Total FEE" TItem="PenjualanAndOrderModel" Property="TotalAfterDiscount" TextAlign="TextAlign.Right" Width="170px">
                <Template Context="item">
                    @item.TotalFeeSales.ToString("N2")
                </Template>
                <FooterTemplate>
                    @penjualans.Sum(x => x.TotalFeeSales).ToString("N2");
                </FooterTemplate>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
</div>


@code {

    private DateTime? start;
    private DateTime? endDate;

    Karyawan _selected;
    public Karyawan SelectedKaryawan { get { return _selected; } set { _selected = value; _= GetData(false); } }
    ICollection<Karyawan> karyawans = new List<Karyawan>();
    IEnumerable<PenjualanAndOrderModel> penjualans=new List<PenjualanAndOrderModel>();
    IQueryable<Penjualan> source;

    protected override Task OnInitializedAsync()
    {

        karyawans.Add(new Karyawan { Id = 0, Name = "Semua" });

        foreach (var item in dbContext.Karyawan)
        {
            karyawans.Add(item);
        }

        return base.OnInitializedAsync();
    }

    public async Task GetData(bool forced=true)
    {
        await Task.Delay(1);
        if (forced)
        {
            if (start != null && endDate != null && start <= endDate)
            {
                source = dbContext.Penjualan.Where(x => x.CreateDate >= start.Value && x.CreateDate <= endDate.Value)
                       .Include(x => x.Salesman)
                       .Include(x => x.Customer)
                       .Include(x => x.Items).ThenInclude(x => x.Unit)
                       .Include(x => x.Items).ThenInclude(x => x.Product).ThenInclude(x => x.Supplier)
                       .Include(x => x.Items).ThenInclude(x => x.Product).ThenInclude(x => x.Units);
            }
        }


        if(source!=null && source.Count() > 0)
        {
            IEnumerable<Penjualan> tempt;


            if (SelectedKaryawan==null || SelectedKaryawan.Id<= 0)
            {
                tempt = source.AsEnumerable();
            }
            else
                tempt = source.Where(x => x.Salesman.Id == SelectedKaryawan.Id);

            penjualans = tempt.Select(item => new PenjualanAndOrderModel
            {
                Created = item.CreateDate,
                Customer = item.Customer.Name,
                Sales = item.Salesman.Name,
                DeadLine = item.DeadLine,
                Invoice = item.Nomor,
                NomorSO = item.Nomor,
                OrderId = item.Id,
                PaymentType = item.Payment, 
                PaymentStatus = item.Status,
                PenjualanId = item.Id,
                Total = item.Total, FeeSales= item.FeeSalesman
            });

        }

        await this.InvokeAsync(() => StateHasChanged());
        StateHasChanged();
    }
}
