@page "/data/stock"

@using ShareModels.ModelViews;
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using System.Text;
@using System.Text.Json;

@inject IProductService productService
@inject IMerkService merkService
@inject IGudangService gudangService
@inject ApplicationDbContext _dbContext
@inject NavigationManager navManager
@inject IStockService stockService;
@inject NotificationService notificationService
@inject IJSRuntime jsRuntime;


<div class="col-md-12">
    <RadzenFieldset Text="Data Real Stok">
        <div style="display:flex; justify-content:space-between; align-items:center">
            <div>
                <div class="form-group" style="display:flex; flex-direction:column; margin-right:20px">
                    <label>Gudang</label>
                    <RadzenDropDown TextProperty="Name" TValue="Gudang"
                                    Style="width:300px"
                                    ValueChanged="@((arg)=>SelectGudang(arg))"
                                    Data=@gudangs />
                </div>
                <div class="form-group mt-2" style="display:flex; flex-direction:column">
                    <label>Merk</label>
                    <RadzenDropDown TextProperty="Name" TValue="Merk"
                                    Style="width:300px"
                                    ValueChanged="@((arg)=>SelectMerk(arg))"
                                    Data=@merks />
                </div>
            </div>
            <div class="d-flex gap-2">
                <RadzenButton Icon="sync" Text="Sync Stock" ButtonStyle="ButtonStyle.Warning" Click="SyncStock" />
                <RadzenButton Icon="print" Text="Cetak" ButtonStyle="ButtonStyle.Danger" 
                Click="@(()=>  { jsRuntime.InvokeAsync<object>("open", $"/report/PrintStockBarang/{gudangId}?merkid={merkId}", "black"); })" />
            </div>
        </div>
        <RadzenDataGrid class="mt-2" Data="@Stocks" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="ProductStock" FilterMode="FilterMode.Advanced"
                        @ref="gridStock" LoadData="@LoadData" Count="@count" PageSize="12">
            <Columns>
                <RadzenDataGridColumn Width="180px" TItem="ProductStock" Property="CodeName" Title="Code" />
                <RadzenDataGridColumn TItem="ProductStock" Property="Name" Title="Product" />
                <RadzenDataGridColumn Width="100px" TItem="ProductStock" Property="Size" Title="Size" />
                <RadzenDataGridColumn Width="100px" TItem="ProductStock" Property="Stock" Title="Stock" />
                <RadzenDataGridColumn Width="150px" TItem="ProductStock" Title="Unit">
                    <Template Context="data">
                        <Radzen.Blazor.RadzenDropDown Data="data.Units" Change="@(()=>ChangeUnit(data))"
                                                      TextProperty="Name" @bind-Value="data.SelectedUnit">

                        </Radzen.Blazor.RadzenDropDown>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="150px" Title="Nilai" TItem="ProductStock" TextAlign="TextAlign.Right">
                    <Template Context="data">
                        @((data.SelectedUnit.Sell * data.Stock).ToString("N2"))
                    </Template>
                    <FooterTemplate>
                        @Stocks.Where(x => merkId == 0 ? true : x.Merk.Id == merkId).Sum(x => x.SelectedUnit == null ? 0 : x.SelectedUnit.Sell * x.Stock).ToString("N2");
                    </FooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenFieldset>
</div>

@code {

    RadzenDataGrid<ProductStock> gridStock;
    public IEnumerable<ProductStock> Stocks { get; set; } = new List<ProductStock>();
    public List<Merk> merks { get; set; } = new List<Merk>();
    public List<Gudang> gudangs { get; set; } = new List<Gudang>();
    int merkId = 0;
    int gudangId = 0;
    int count;
    //  bool withOrder = false;

    protected override async Task OnInitializedAsync()
    {
        gudangs.Add(new Gudang { Id = 0, Name = "All" });
        var guds = await gudangService.Get();

        foreach (var item in guds)
        {
            gudangs.Add(item);
        }

        merks.Add(new Merk { Id = 0, Name = "All" });
        var mer = await merkService.Get();

        foreach (var item in mer)
        {
            merks.Add(item);
        }



    }


    void SelectMerk(Merk data)
    {
        merkId = data.Id;
        gridStock.Reload();

    }


    void SelectGudang(Gudang data)
    {
        gudangId = data.Id;
        gridStock.Reload();
    }


    async Task LoadData(LoadDataArgs args)
    {

        try
        {
            Stocks = await stockService.GetProductStocks(gudangId);
            count = Stocks.Count();
            //   await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            throw new SystemException(ex.Message);
        }

    }

    async Task ChangeUnit(ProductStock stock)
    {
        if (stock.UnitSelected.Level < stock.SelectedUnit.Level)
        {
            stock.Stock = stock.Stock / stock.SelectedUnit.Quantity;
        }
        else
        {
            stock.Stock = stock.Stock * stock.UnitSelected.Quantity;
        }
        stock.UnitSelected = stock.SelectedUnit;
    }


    async Task SyncStock()
    {
        try
        {
            var success = await stockService.SyncStockFromMovmentStock();
            if (success)
                notificationService.Notify(new NotificationMessage
                    {
                        Detail = "Sync Stock berhasil !",
                        Duration = 3000,
                        Severity = NotificationSeverity.Success,
                        Summary = "Success"

                    });
            else
                notificationService.Notify(new NotificationMessage
                    {
                        Detail = "Sync Stock Gagal !",
                        Duration = 3000,
                        Severity = NotificationSeverity.Info,
                        Summary = "Info"

                    });
        }
        catch (Exception)
        {

            notificationService.Notify(new NotificationMessage
                {
                    Detail = "Maaf terjadi kesalahan  !",
                    Duration = 3000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"

                });
        }

    }
}
