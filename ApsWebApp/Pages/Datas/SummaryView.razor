@page "/data/summary"

@using ShareModels.ModelViews;
@using Microsoft.EntityFrameworkCore;

@inject ApplicationDbContext dbContext
@inject IPenjualanService penjualanService
@attribute [Authorize]

<RadzenFieldset Text="Summary">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Dari </label>
                <div class="col-sm-10">
                    <RadzenDatePicker Change="@(()=>GetData(true))" @bind-Value="start" Style="width:200px" />
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Sampi</label>
                <div class="col-sm-10">
                    <RadzenDatePicker Change="@(()=>GetData(true))" @bind-Value="endDate" Style="width:200px" />
                </div>
            </div>
            <div class="form-group row" style="padding-left:15px">
                <RadzenRadioButtonList @bind-Value=@grouping TValue="int" Change=@((args) => GetData(false))>
                    <Items>
                        <RadzenRadioButtonListItem Text="Product" Value="1" />
                        <RadzenRadioButtonListItem Text="Penjualan" Value="2" />
                        <RadzenRadioButtonListItem Text="Customer" Value="3" />
                        <RadzenRadioButtonListItem Text="Sales" Value="4" />
                    </Items>
                </RadzenRadioButtonList>
            </div>
        </div>
        <div class="col-md-12">
            <RadzenGrid @ref="grid" Data="datas" AllowSorting="true" ColumnWidth="200px">
                <Columns>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
</RadzenFieldset>


@code {
    int grouping = 1;
    private DateTime? start;
    private DateTime? endDate;
    private List<PenjualanViewModel> datas = new List<PenjualanViewModel>();
    private IEnumerable<Penjualan> source = new List<Penjualan>();
    RadzenGrid<PenjualanViewModel> grid;

    public async Task GetData(bool forced)
    {
        await Task.Delay(1);

        if (forced)
            source = new List<Penjualan>();

        if (start != null && endDate != null)
        {
            if (source.Count() <= 0 || forced)
            {
                source = dbContext.Penjualan.Where(x => x.CreateDate >= start.Value && x.CreateDate <= endDate.Value)
                    .Include(x => x.Salesman)
                    .Include(x => x.Customer)
                    .Include(x => x.Items).ThenInclude(x => x.Unit)
                    .Include(x => x.Items).ThenInclude(x => x.Product).ThenInclude(x => x.Supplier)
                    .Include(x => x.Items).ThenInclude(x => x.Product).ThenInclude(x => x.Units);
            }

            grid.ColumnsCollection.Clear();

            datas.Clear();
            switch (grouping)
            {
                    #pragma warning disable BL0005
                case 1:

                    var items = source.SelectMany(x => x.Items, (x, a) => new PenjualanViewModel
                    {
                        Activity = x.Activity,
                        Amount = a.Quantity,
                        CodeArticle = a.Product.CodeArticle,
                        CodeName = a.Product.CodeName,
                        CreateDate = x.CreateDate,
                        CustomerName = x.Customer.Name,
                        SupplierName = a.Product.Supplier.Nama,
                        SalesName = x.Salesman.Name,
                        Merk = a.Product.Merk.Name,
                        Name = a.Product.Name,
                        PayDeadLine = x.DeadLine,
                        Payment = x.Payment,
                        Price = a.Price,
                        Size = a.Product.Size,
                        Unit = a.Unit.Name,
                        Status = x.Status,
                        Id = x.Id

                    });


                    var group1 = items.GroupBy(x => x.ProductView).ToList();
                    foreach (var xx in group1)
                    {
                        var item = xx.FirstOrDefault();
                        item.TotalDiscountView = xx.ToList().Sum(x => x.TotalDiscount).ToString("N2");
                        item.GrandTotal = (xx.ToList().Sum(x => x.TotalView) - xx.ToList().Sum(x => x.TotalDiscount)).ToString("N2");
                        item.AmountView = xx.ToList().Sum(x => x.Amount).ToString("N");
                        datas.Add(item);
                    }

                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "Name", Title = "Name" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "CodeName", Title = "Code Name" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "CodeName", Title = "Article" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "SupplierName", Title = "Supplier" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "AmountView", Title = "Amount" });
                    break;

                case 2:

                    items = source.Select(a => new PenjualanViewModel()
                    {
                        Activity = a.Activity,
                        CreateDate = a.CreateDate,
                        CustomerName = a.Customer.Name,
                        SalesName = a.Salesman.Name,
                        TotalDiscountView = a.TotalDiscount.ToString("N2"),
                        GrandTotal = (a.Total - a.TotalDiscount).ToString("N2"),
                        PayDeadLine = a.DeadLine,
                        Payment = a.Payment,
                        Status = a.Status,
                        Id = a.Id

                    });
                    foreach (var item in items)
                    {
                        datas.Add(item);
                    }

                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "CreateDate", Title = "Crate" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "Nomor", Title = "Nomor" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "CustomerName", Title = "Customer" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "Payment", Title = "Payment Type" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "Status", Title = "Paid" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "SalesName", Title = "Sales" });
                    break;


                case 3:

                    var customers = source.GroupBy(x => x.Customer.Id).Select(a => new PenjualanViewModel()
                    {
                        CustomerName = a.First().Customer.Name,
                        TotalDiscountView = (a.Sum(n =>n.TotalDiscount)).ToString("N2"),
                        GrandTotal = a.Sum(n => n.Total - n.TotalDiscount).ToString("N2")
                    });

                    foreach (var item in customers)
                    {
                        datas.Add(item);
                    }

                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "CustomerName", Title = "Customer" });
                    break;


                case 4:
                    var sales = source.GroupBy(x => x.Salesman.Id).Select(a => new PenjualanViewModel()
                    {
                        SalesName = a.First().Salesman.Name,
                        TotalDiscountView = (a.Sum(n => n.TotalDiscount)).ToString("N2"),
                        GrandTotal = (a.Sum(n =>n.Total- n.TotalDiscount)).ToString("N2"),
                        TotalFeeSalesman = (a.Sum(n => n.Total - n.TotalDiscount) * (a.First().FeeSalesman / 100)).ToString("N2")

                    });

                    foreach (var item in sales)
                    {
                        datas.Add(item);
                    }

                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "SalesName", Title = "Sales" });
                    grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>()
                    {
                        Property = "TotalFeeSalesman",
                        Title = "Fee Sales",
                        TextAlign = TextAlign.Right
                    });
                    break;
            }

            grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "TotalDiscountView", Title = "Discount", TextAlign = TextAlign.Right });
            grid.ColumnsCollection.Add(new RadzenGridColumn<PenjualanViewModel>() { Property = "GrandTotal", Title = "Total", TextAlign = TextAlign.Right });
            await grid.Reload();
        }
    }

}
