@page "/penjualan/realisasi";

@attribute [Authorize]

@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject ApplicationDbContext dbContext;
@inject IPenjualanService penjualanService;

@inject NavigationManager nav;



<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Data Penjualan">
            <RadzenButton Icon="add" Style="margin-bottom:10px" ButtonStyle="ButtonStyle.Success"
                          Click="@(()=> nav.NavigateTo($"/penjualan/realisasiorder"))" />
            <RadzenDataGrid Data="@penjualans" FilterMode="FilterMode.Advanced" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="Penjualan"
                        @ref="grid" LoadData="@LoadData" Count="@count" PageSize="12">
                <Columns>
                    <RadzenDataGridColumn Width="100px" TItem="Penjualan" Property="CreateDate" Title="Crated">
                        <Template Context="item">
                            @item.CreateDate.ToString("dd/MM/yyyy")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="160px" TItem="Penjualan" Property="Nomor" Title="Sale Number" />
                    <RadzenDataGridColumn CssClass="" TItem="Penjualan" Property="Customer.Name" Title="Customer" />
                    <RadzenDataGridColumn TItem="Penjualan" Property="Salesman.Name" Title="Sales" />
                    <RadzenDataGridColumn TItem="Penjualan" Property="Payment" Width="100px" Title="Payment" />
                    <RadzenDataGridColumn Width="150px" TItem="Penjualan" TextAlign="TextAlign.Right" Property="Total" Title="Total">
                        <Template Context="item">
                            @item.Total.ToString("N")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="100px" TItem="Penjualan" Property="Status" Title="Status">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value="@currentPeyment" TextProperty="Text"
                                            ValueProperty="Value" Style="width:100%" Change="@(()=>grid.Reload())"
                                            Data="@(Enum.GetValues(typeof(PaymentStatus)).Cast<PaymentStatus>().Select(t => new { Text = $"{t}", Value = t }))" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Penjualan" Context="item"   Filterable="false"
                                      Sortable="false" TextAlign="TextAlign.Center" Width="65px">
                        <Template Context="item">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="list"
                                          Size="ButtonSize.Medium"
                                          Click="@(() => nav.NavigateTo($"/penjualan/realisasidetail/{item.Id}"))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
       
    </Tabs>
</RadzenTabs>


@code {

    IEnumerable<Penjualan> penjualans;

    PaymentStatus currentPeyment;

    RadzenDataGrid<Penjualan> grid;
    int count;


    async Task LoadData(LoadDataArgs args)
    {
        var query = dbContext.Penjualan
            .Include(x=>x.Items)
            .Include(x => x.Customer)
            .Include(x => x.Salesman)
            .AsQueryable();

        query = query.OrderByDescending(x => x.Id);

        if (currentPeyment != PaymentStatus.All)
            query = query.Where(x => x.Status == currentPeyment);

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        var cc = query.Select(x=>x);
        count = cc.Count();
        penjualans = cc.Skip(args.Skip.Value).Take(args.Top.Value).ToList();


        await InvokeAsync(StateHasChanged);
    }


    public async Task onComplete(Task<IEnumerable<Penjualan>> task)
    {
        var datas = await task;
        penjualans = datas.OrderByDescending(x => x.Id).ToList();
        await InvokeAsync(() => StateHasChanged());
    }


}