@page "/penjualan/order";

@attribute [Authorize]


@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject ApplicationDbContext dbContext;
@inject IPenjualanService penjualanService;
@inject ICustomerService customerService;
@inject IProductService productService;
@inject DialogService dialog;

@inject NavigationManager nav;

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Data Order Penjualan">
            <RadzenButton Icon="add" Style="margin-bottom:10px" ButtonStyle="ButtonStyle.Success"
                          Click="@(()=> nav.NavigateTo($"/penjualan/orderdetail"))" />
            <RadzenDataGrid Data="@orders"
                        @ref="grid" LoadData="@LoadData" Count="@count" PageSize="12" FilterMode="FilterMode.Advanced"
                        AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="OrderPenjualan">
                <Columns>
                    <RadzenDataGridColumn Width="120px" TItem="OrderPenjualan" Property="OrderDate" Title="Order" />
                    <RadzenDataGridColumn Width="180px" TItem="OrderPenjualan" Property="Nomor" Title="Nomor" />
                    <RadzenDataGridColumn Width="280px" TItem="OrderPenjualan" Property="Customer.Name" Title="Customer" />
                    <RadzenDataGridColumn TItem="OrderPenjualan" Property="Sales.Name" Title="Sales" />
                    <RadzenDataGridColumn Width="150px" TextAlign=TextAlign.Right TItem="OrderPenjualan" Property="Total" Title="Total">
                        <Template Context="item">
                            @(item.Total.ToString("N"))
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="120px" TItem="OrderPenjualan" Property="Status" Title="Status">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value="@currentTOC" TextProperty="Text"
                                            ValueProperty="Value" Style="width:100%"
                                            Change="@(()=>grid.Reload())"
                                            Data="@(Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>().Select(t => new { Text = $"{t}", Value = t }))" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrderPenjualan" Context="item"   
                                      Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                        <Template Context="item">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit"
                                          Size="ButtonSize.Medium"
                                          Click="@(()=> nav.NavigateTo($"/penjualan/orderdetail/{item.Id}"))" />

                            <RadzenButton Visible=@(item.Status==OrderStatus.Baru?true:false) ButtonStyle="ButtonStyle.Warning" Icon="add"
                                          Size="ButtonSize.Medium" Click="@(()=> CreatePenjualan(item))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {


    IEnumerable<OrderPenjualan> orders;

    OrderStatus currentTOC;
    RadzenDataGrid<OrderPenjualan> grid;
    int count;

    async Task LoadData(LoadDataArgs args)
    {


        try
        {
            var query = dbContext.OrderPenjualan
            .Include(x => x.Sales)
            .Include(x => x.Items)
            .Include(x => x.Customer).AsQueryable();

            if (currentTOC != OrderStatus.Semua)
                query = query.Where(x => x.Status == currentTOC);

            if (!string.IsNullOrEmpty(args.Filter))
            {
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                query = query.OrderBy(args.OrderBy);
            }


            var result = query.ToList();
            count = result.Count();
            orders = result.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task onComplete(Task<IEnumerable<OrderPenjualan>> task)
    {
        var datas = await task;
        orders = datas.OrderByDescending(x => x.OrderDate).ToList();
       await InvokeAsync(() => StateHasChanged());
    }



    async Task CreatePenjualan(OrderPenjualan item)
    {

        var resultDialog = await dialog.Confirm("Yakin Buat Penjualan ? ", "Buat Penjualan", new ConfirmOptions { OkButtonText = "Ya", CancelButtonText = "Tidak" });
        if (resultDialog != null && resultDialog == true)
        {
                nav.NavigateTo($"/penjualan/realisasiorder/{item.Id}", true);
        }
    }
}