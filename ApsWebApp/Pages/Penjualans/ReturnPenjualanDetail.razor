@page "/penjualan/pengembaliandetail/{id?}"

@using ShareModels.ModelViews;
@using ApsWebApp.Pages.ShareComponent;
@using Radzen;
@using Microsoft.EntityFrameworkCore;

@attribute [Authorize]

@inject ApplicationDbContext dbContext;
@inject IMerkService merkService;
@inject IGudangService gudangService;
@inject ICustomerService customerService;
@inject IPenjualanService penjualanService;
@inject IProductService productService;
@inject IKaryawanService karyawanService;
@inject IPengembalianPenjualanService returnSerivce;
@inject NavigationManager nav;
@inject NotificationService notificationService;

@inject DialogService DialogService;

<div class="noprint">
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Create/Edit Pengembalian">
                <div class="col-md-12">
                    <RadzenFieldset Text="Data Pengembalian" Style="font-size:14px">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row" style="margin-top:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Nomor Pengembalian" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Value="@model.Nomor" Style="width:80%" />
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Customer " />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        Data=@customers
                                                        @bind-Value=@model.Customer Change="@((arg)=>SelectCustomer(arg))"
                                                        TextProperty="Name" Style="width:80%" />
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-6">
                                <div class="row" style="margin-top:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Gudang" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenDropDown Data=@gudangs
                                                        @bind-Value=@model.Gudang
                                                        TextProperty="Name" Style="width:80%" />
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Tanggal" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenDatePicker @bind-Value="model.Created" Placeholder="Tanggal" Style="width:80%" />
                                    </div>
                                </div>
                            </div>
                        </div>

                    </RadzenFieldset>
                </div>
                <div class="col-md-12">
                    <RadzenFieldset Text="Data Pengembalian">
                        <div class="row col-md-6 mb-2">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Cari Product" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Data=@penjualans.Where(item=> !model.Items.Any(data=> data.Product.Id.Equals(item.Product.Id) && data.Penjualan.Id.Equals( item.Penjualan.Id)))
                                                @bind-Value=@product.Id
                                                TextProperty="Product.CodeName" ValueProperty="Id" Style="width:400px"
                                                Change=@(args => SelectProduct(args, "Supplier")) />
                            </div>
                        </div>
                        <RadzenDataGrid @ref="ordersGrid" Data="@(model.Items)" AllowFiltering="true" AllowSorting="true" TItem="PengembalianPenjualanItem">
                            <Columns>
                                <RadzenDataGridColumn TItem="PengembalianPenjualanItem" Property="Penjualan.Nomor" Title="Penjualan" />
                                <RadzenDataGridColumn TItem="PengembalianPenjualanItem" Property="Product.CodeName" Title="Code" />
                                <RadzenDataGridColumn TItem="PengembalianPenjualanItem" Property="Product.Name" Title="Product" />
                                <RadzenDataGridColumn Width="120px" Title="Qty" TItem="PengembalianPenjualanItem">
                                    <Template Context="item">
                                        <RadzenNumeric @bind-Value="item.Quantity" Step="1" TValue="double"
                                                       Change=@(args => OnChangeOrderItem(args, item)) />
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Width="110px" TItem="PengembalianPenjualanItem" Property="Unit.Name" Title="Unit">
                                    <EditTemplate Context="item">
                                        <RadzenDropDown @bind-Value="item.Unit" Data="@item.Product.Units"
                                                        Change=@(args => OnChangeOrderItem(args, item))
                                                        TextProperty="Name" Style="width:100%" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Width="100px" TItem="PengembalianPenjualanItem" Property="Price" Title="Price">
                                    <EditTemplate Context="item">
                                        <RadzenNumeric @bind-Value="item.Price" Step="0.25" />
                                    </EditTemplate>

                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="PengembalianPenjualanItem" Width="150px" TextAlign="TextAlign.Right" Property="DiscountView" Title="Disc"></RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="PengembalianPenjualanItem" Width="150px" TextAlign="TextAlign.Right" Property="Total" Title="Total">
                                    <EditTemplate Context="item">
                                        <RadzenNumeric @bind-Value="item.Discount" Step="0.1" />
                                    </EditTemplate>
                                    <FooterTemplate>
                                        <div>Total          </div>
                                        <div>Discount       </div>
                                        <div>Total Payment  </div>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="PengembalianPenjualanItem" Context="sampleBlazorModelsSampleOrder"
                                                      Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="120px">
                                    <HeaderTemplate>
                                        <RadzenCheckBox Value="@(checkall)" TValue="bool" ValueChanged="@((x)=>OnCheckChange(x))" />
                                    </HeaderTemplate>
                                    <Template Context="order">
                                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="order">
                                        <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))">
                                        </RadzenButton>
                                        <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@((args) => CancelEdit(order))">
                                        </RadzenButton>
                                    </EditTemplate>
                                    <FooterTemplate>
                                        <div>@model.Items.Sum(x => x.Price * x.Quantity) </div>
                                        <div>@model.Items.Sum(x => x.DiscountView) </div>
                                        <div>@(model.Items.Sum(x => x.Price * x.Quantity) - model.Items.Sum(x => x.DiscountView))  </div>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenFieldset>
                    <Radzen.Blazor.RadzenFieldset>
                        <div class="text-right">
                            <RadzenButton Click=@(args => Cancel()) Icon="undo" Text="Kembali" ButtonStyle="ButtonStyle.Warning" />
                            <RadzenButton Click=@(args => Save(model)) Icon="save" Text="Simpan" ButtonStyle="ButtonStyle.Success" />
                            <RadzenButton Visible=@(model.Id > 0) Click=@(args => DialogService.OpenAsync<PrintPenjualanDialog>($"Cetak",
                                          new Dictionary<string, object>() { }, new DialogOptions())) Icon="print" ButtonStyle="ButtonStyle.Info" Style="margin-bottom:5px" />
                        </div>
                    </Radzen.Blazor.RadzenFieldset>

                </div>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {

    [Parameter]
    public string id { get; set; }

    [Parameter]
    public string orderId { get; set; }

    private Product product = new Product();
    private IEnumerable<Penjualanitem> penjualans = new List<Penjualanitem>();
    private IEnumerable<Merk> merks;
    private IEnumerable<Karyawan> sales;
    private IEnumerable<Gudang> gudangs;
    private IEnumerable<Customer> customers;
    PengembalianPenjualan model = new PengembalianPenjualan() { Items = new List<PengembalianPenjualanItem>() };
    RadzenDataGrid<PengembalianPenjualanItem> ordersGrid;

    bool checkall;
    // int merkid = 0;

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += OnCloseDialog;
        customers = await customerService.Get();
        gudangs = await gudangService.Get();
        merks = await merkService.Get();
        sales = await karyawanService.Get();
        model.Gudang = gudangs.FirstOrDefault();
        if (!string.IsNullOrEmpty(id))
        {
            var Id = Convert.ToInt32(id);
            model = dbContext.PengembalianPenjualan.Where(x => x.Id == Id)
            .Include(x => x.Customer)
            .Include(x => x.Items).ThenInclude(x => x.Product).FirstOrDefault();
            penjualans = await returnSerivce.GetPenjualanByCustomerId(model.Customer.Id);
        }
    }

    void OnCheckChange(bool data)
    {
        checkall = !checkall;

        foreach (var item in model.Items)
        {
            if (checkall)
                ordersGrid.EditRow(item);

            else
            {
                ordersGrid.UpdateRow(item);
            }
        }
    }

    private void RemoveItem(PengembalianPenjualanItem item)
    {
        model.Items.Remove(item);

    }
    private void Cancel()
    {
        nav.NavigateTo("/penjualan");
    }

    private async Task Save(PengembalianPenjualan model)
    {
        try
        {


            if (model.Id <= 0 && Validate(model))
            {
                PengembalianPenjualan result = await returnSerivce.Post(model);
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "Data pengembalian berhasil dibuat",
                        Duration = 3000
                    });

                nav.NavigateTo("/pengembalian");
            }
            else if (Validate(model))
            {
                var saved = await returnSerivce.Put(model.Id, model);
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "Data pengembalian berhasil diubah",
                        Duration = 3000
                    });
            }
        }
        catch (System.Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 3000
                });
        }

    }

    public bool Validate(PengembalianPenjualan model)
    {

        try
        {
            var groups = penjualans.GroupBy(x => x.Id);
            foreach (var item in model.Items)
            {
                var group = groups.Where(xx => xx.Key == item.Id).FirstOrDefault();
                if (group != null && item.Quantity > group.Sum(xx => xx.Quantity))
                {
                    throw new SystemException($"Penjualan {item.Product.Name} hanya {group.Sum(xx => xx.Quantity)}");
                }
            }
            return true;
        }
        catch (System.Exception ex)
        {

            throw new SystemException(ex.Message);
        }
    }

    string OnErrorStock(Penjualanitem data)
    {
        return "";
    }

    private async Task OnChangeOrderItem(object arg, PengembalianPenjualanItem item)
    {

        if (arg.GetType() == typeof(Unit))
        {
            var unitId = (arg as Unit).Id;
            var unit = item.Product.Units.Where(x => x.Id == unitId).FirstOrDefault();
            if (unit != null)
            {
                item.Unit = unit;
            }
            await Task.Delay(100);
        }


        if (arg.GetType() == typeof(double))
        {

        }


        var productStok = penjualans.Where(x => x.Product.Id == item.Product.Id && x.Penjualan.Id == item.Penjualan.Id).FirstOrDefault();
        if (productStok != null)
        {
            var readyStok = productStok.Quantity / item.Unit.Quantity;
            if (item.Quantity > readyStok)
            {
                notificationService.Notify(new NotificationMessage
                    {
                        Detail = $"Penjualan {productStok.Product.CodeName} hanya = {readyStok} {item.Unit.Name}",
                        Severity = NotificationSeverity.Error
                    });
                item.Quantity = readyStok;
            }
        }

        StateHasChanged();
    }

    void EditRow(PengembalianPenjualanItem item)
    {
        ordersGrid.EditRow(item);
    }

    void SaveRow(PengembalianPenjualanItem item)
    {
        ordersGrid.UpdateRow(item);
    }

    async Task CancelEdit(PengembalianPenjualanItem item)
    {
        model.Items.Remove(item);
        await ordersGrid.Reload();
    }



    async Task SelectCustomer(object dataParameter)
    {
        var customer = dataParameter as Customer;
        if (customer != null)
        {
            var allPenjualan = await returnSerivce.GetPenjualanByCustomerId(customer.Id);
            var xGroup = allPenjualan.GroupBy(xGroup => xGroup.Product.Id);
            var penjualanTemp = new List<Penjualanitem>();
            foreach (var item in xGroup)
            {
                var first = item.FirstOrDefault();
                first.Quantity = item.Sum(x => x.Quantity * x.Unit.Quantity);
                var product = await productService.Get(first.Product.Id);
                first.Unit = product.Units.Where(x => x.Level == 0).FirstOrDefault();
                penjualanTemp.Add(first);
            }

            penjualans = penjualanTemp.ToList();
        }
    }

    async Task SelectProduct(object value, string name)
    {
        var prodId = (int)value;
        if (prodId > 0)
        {
            var _product = penjualans.Where(x => x.Id == prodId).FirstOrDefault();
            if (_product != null && model.Items.Where(x => x.Product.Id == _product.Id).FirstOrDefault() == null)
            {
                var item = new PengembalianPenjualanItem { Stock = _product.Quantity, Product = _product.Product, Quantity = 1, Discount = _product.Discount, Price = _product.Price, Unit = _product.Unit, Penjualan = _product.Penjualan };
                item.Unit = _product.Product.Units.FirstOrDefault();

                model.Items.Add(item);
            }
            product = new Product();
            await ordersGrid.Reload();
        }


    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
        StateHasChanged();
    }


    private void OnCloseDialog(dynamic parameter)
    {
        try
        {

        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Detail = ex.Message,
                    Duration = 3000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });
        }
    }



    void PrintSuratjalan()
    {
        nav.NavigateTo($"/report/printsuratjalan/{model.Id}", true);
    }
    void PrintFaktur()
    {
        nav.NavigateTo($"/report/printpenjualan/{model.Id}", true);
    }


}
