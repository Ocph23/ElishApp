@page "/karyawan/change/{id?}"

@inject NavigationManager nav;
@inject NotificationService NotificationService;
@inject IKaryawanService karyawanService;
@inject ICustomerService customerService;
@inject DialogService dialogService
@attribute [Authorize]

<Radzen.Blazor.RadzenFieldset Text="@title">
    <div class="row">
        <div class="col-xl-12">
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Data Karaywan">
                        <RadzenTemplateForm Data="model" TItem="Karyawan" Submit="Save">
                            <Radzen.Blazor.RadzenFieldset Text="Data Karyawan/Sales">
                                <div class="form-row">
                                    <div class="col-md-6">
                                        <RadzenFormField Text="Nama Karyawan/Sales" Component="Name" class="rz-my-1 rz-w-100">
                                            <RadzenTextBox @bind-Value="@model.Name" Name="Name"  />
                                            <RadzenRequiredValidator Component="Name" Text="Name is required" Popup="true" Style="position: absolute" />
                                        </RadzenFormField>

                                        <RadzenFormField Text="Email" class="rz-my-1 rz-w-100">
                                            <RadzenTextBox @bind-Value="@model.Email" />
                                        </RadzenFormField>

                                        <RadzenFormField Text="Telepon" class="rz-my-1 rz-w-100">
                                            <RadzenTextBox @bind-Value="@model.Telepon" />
                                        </RadzenFormField>

                                        <RadzenFormField Text="Alamat" class="rz-my-1 rz-w-100">
                                            <RadzenTextBox @bind-Value="@model.Address" />
                                        </RadzenFormField>


                                        <hr />

                                        <div class="d-flex justify-content-end gap-2">
                                            <Radzen.Blazor.RadzenButton Icon="undo" Text="Kembali" ButtonType="ButtonType.Button"
                                                                        Click="@(()=>GoBack())" ButtonStyle="ButtonStyle.Info" />
                                            <Radzen.Blazor.RadzenButton Icon="save" Text="Simpan" ButtonType="ButtonType.Submit"
                                                                        ButtonStyle="ButtonStyle.Warning" />
                                        </div>
                                    </div>
                                </div>


                            </Radzen.Blazor.RadzenFieldset>
                        </RadzenTemplateForm>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="User Akses">
                        <RadzenButton Click=@AddRole Icon="add" ButtonStyle="ButtonStyle.Success" />
                        <RadzenDataGrid @ref="grid" Data="model.User.Roles">
                            <Columns>
                                <RadzenDataGridColumn TItem="UserRole" Title="Role" Property="Role.Name" />
                                <RadzenDataGridColumn TItem="UserRole" Context="item" Width="100px">
                                    <Template>
                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(async()=> await DeleteRole(item))"></RadzenButton>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>

                    @if (customers != null && customers.Count() > 0)
                    {
                        <RadzenTabsItem Text="Data Customer">
                            <RadzenDataGrid Data="customers" AllowFiltering="true" AllowPaging="false" AllowSorting="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="Customer" Title="Name" Property="Name" />
                                    <RadzenDataGridColumn TItem="Customer" Title="Contact Person" Property="ContactName" Width="250px" />
                                    <RadzenDataGridColumn TItem="Customer" Title="Telepon" Property="Telepon" Width="250px" />
                                    <RadzenDataGridColumn TItem="Customer" Context="item" Width="65px">
                                        <Template>
                                            <RadzenButton Icon="info" ButtonStyle="ButtonStyle.Warning" Click="@(()=> nav.NavigateTo($"/customer/change/{item.Id}"))"></RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
        </div>
    </div>
</Radzen.Blazor.RadzenFieldset>

@code {
    [Parameter]
    public string id { get; set; }

    public string title = "Add Karyawan";

    public Karyawan model { get; set; } = new Karyawan();
    IEnumerable<Customer> customers;

    RadzenDataGrid<UserRole> grid;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(id))
            {
                model = new Karyawan();
            }
            else
            {
                title = "Edit Karyawan/Sales";
                model = await karyawanService.Get(Convert.ToInt32(id));
                customers = await customerService.GetBySales(Convert.ToInt32(id));
            }
        }
        catch
        {
            //ex.Message;
        }
    }


    public async Task AddRole()
    {
        var args = await dialogService.OpenAsync<AddUserAccessView>($"Add Role Access",
                                        new Dictionary<string, object>() { { "model", model.User }, },
                                        new DialogOptions());

        if (args != null)
        {
            var result = args as UserRole;
            model.User.Roles.Add(result);
        }
        await grid.Reload();

    }

    async Task DeleteRole(UserRole role)
    {
        var result = await dialogService.Confirm("Yakin Hapus Role ? ", "Hapus ?");
        if (result.Value)
        {
            var deleted = await karyawanService.RemoveRole(role.Id);
            if (deleted)
                model.User.Roles.Remove(role);
        }
        await grid.Reload();
    }


    private async Task Save(Karyawan kar)
    {
        try
        {
            var Id = Convert.ToInt32(id);
            if (Id <= 0)
            {
                var data = await karyawanService.Post(model);
                if (data != null)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Detail = "Data Saved !",
                            Duration = 3000,
                            Severity = NotificationSeverity.Success,
                            Summary = "Success"

                        });
                    nav.NavigateTo("/karyawan");
                }
            }
            else
            {
                var updated = await karyawanService.Update(Convert.ToInt32(id), model);
                if (updated)
                {
                    nav.NavigateTo("/karyawan");
                }
            }


            if (grid != null)
            {
                await grid.Reload();
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Detail = ex.Message,
                    Duration = 3000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });
        }


    }


    private void GoBack()
    {
        nav.NavigateTo("/karyawan");
    }



}
