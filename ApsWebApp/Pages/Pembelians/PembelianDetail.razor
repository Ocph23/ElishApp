@page "/pembelian/realisasi/detail/{id?}";

@using ShareModels.ModelViews;
@using ApsWebApp.Pages.Pembelians;


@attribute [Authorize]

@inject IGudangService gudangService;
@inject ISupplierService supplierService;
@inject IPembelianService pembelianService;
@inject IProductService productService;
@inject NotificationService NotificationService;
@inject DialogService DialogService;
@inject IStockService stockService;


<nav aria-label="breadcrumb">
    <h3>Data Pembelian</h3>
</nav>
<div class="row">
    <div class="col-md-12">
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Data Pembelian">
                    <div class="row" style="padding:10px">
                        <div class="col-md-6">
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Nomor" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox Value="@model.Nomor" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Suplier" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.OrderPembelian.Supplier.Nama" />
                                </div>
                            </div>


                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="PO" />
                                </div>

                                <div class="col-md-8">
                                    <RadzenTextBox Value="@model.OrderPembelian.Nomor" />
                                </div>
                            </div>

                            <div class="row" style="margin-top:10px">

                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Gudang" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    Data=@gudangs
                                                    @bind-Value=@model.Gudang
                                                    TextProperty="Name" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Nomor Inv" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.InvoiceNumber" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Jatuh Tempo" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenNumeric @bind-Value="model.DeadLine" />
                                </div>
                            </div>

                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Tanggal" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDatePicker @bind-Value="model.CreatedDate" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Status Pembayaran" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox Value="@model.Status.ToString()" />
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <RadzenFieldset Text="Data Orders">
                                <div class="row col-md-6">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Cari Product" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        Data=@products.Where(item=> !model.Items.Any(data=> data.Product.Id.Equals(item.Id)))
                                                        @bind-Value=@product.Id
                                                        TextProperty="CodeName" ValueProperty="Id"
                                                        Change=@(args => SelectProduct(args, "Supplier")) />
                                    </div>
                                </div>


                                <RadzenDataGrid class="my-2" @ref="ordersGrid" Data="@(model.Items)"
                                                AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
                                                TItem="PembelianItem">
                                    <Columns>
                                        <RadzenDataGridColumn Width="180px" TItem="PembelianItem" Property="Product.CodeName" Title="Code" />
                                        <RadzenDataGridColumn TItem="PembelianItem" Property="Product.Name" Title="Product" />
                                        <RadzenDataGridColumn Width="85px" TItem="PembelianItem" TextAlign="TextAlign.Right" Context="data" Property="Amount" Title="Amount">
                                            <Template Context="data">
                                                @data.Amount
                                            </Template>
                                            <EditTemplate Context="item">
                                                <RadzenNumeric TValue="double" @bind-Value="item.Amount" Step="0.25" Change=@(args => OnChangeOrderItem(args, item)) />
                                            </EditTemplate>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Width="80px" TItem="PembelianItem" Property="Unit.Name" Title="Unit">
                                            <EditTemplate Context="item">
                                                <RadzenDropDown @bind-Value="item.Unit.Id" Data="@item.Product.Units"
                                                                Change=@(args => OnChangeOrderItem(args, item))
                                                                TextProperty="Name" ValueProperty="Id" Style="width:100%" />
                                            </EditTemplate>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Width="120px" TextAlign="TextAlign.Right" TItem="PembelianItem" Property="Price" Title="Price">
                                            <Template Context="item">
                                                @(item.Price.ToString("N"))
                                            </Template>
                                            <EditTemplate Context="item">
                                                <RadzenNumeric @bind-Value="item.Price" Step="0.25" />
                                            </EditTemplate>
                                            <FooterTemplate>
                                                <div>Total</div>
                                                <div>Discount</div>
                                                <div>Total Payment </div>
                                            </FooterTemplate>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Width="120px" TextAlign="TextAlign.Right" TItem="PembelianItem" Title="Disc">
                                            <Template Context="item">
                                                @(item.DiscountView.ToString("N"))
                                            </Template>
                                            <EditTemplate Context="item">
                                                <RadzenNumeric @bind-Value="item.Discount" Step="0.25" />
                                            </EditTemplate>
                                            <FooterTemplate>
                                                <div>Total</div>
                                                <div>Discount</div>
                                                <div>Total Payment </div>
                                            </FooterTemplate>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Width="150px" TItem="PembelianItem" Property="Total" Title="Total" TextAlign="TextAlign.Right">
                                            <Template Context="item">
                                                @(item.Total.ToString("N"))
                                            </Template>
                                            <FooterTemplate>
                                                @{
                                                    <div>@model.Total.ToString("N")</div>
                                                    <div>@model.Items.Sum(x => x.DiscountView).ToString("N")</div>
                                                    <div>@((model.Total - model.Items.Sum(x => x.DiscountView)).ToString("N"))</div>
                                                }
                                            </FooterTemplate>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="PembelianItem" Context="sampleBlazorModelsSampleOrder"
                                        Visible=@((Int32)model.Status < 1)
                                        Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                                            <HeaderTemplate>
                                                <RadzenCheckBox Value="@(checkall)" TValue="bool" ValueChanged="@((x)=>OnCheckChange(x))" />
                                            </HeaderTemplate>
                                            <Template Context="order">
                                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))">
                                                </RadzenButton>
                                            </Template>
                                            <EditTemplate Context="order">
                                                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))">
                                                </RadzenButton>
                                                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary"
                                                Click="@((args) => CancelEdit(order))">
                                                </RadzenButton>
                                            </EditTemplate>
                                            <FooterTemplate>
                                                <RadzenButton Click=@(args => Save(model)) Icon="save" ButtonStyle="ButtonStyle.Success" />
                                            </FooterTemplate>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenFieldset>


                        </div>
                    </div>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Pembayaran">
                    <RadzenFieldset Text="Pembayaran">
                        <RadzenButton Visible=@(model.Status != PaymentStatus.Lunas)
                        Style="margin-bottom:10px"
                        Click=@(args => DialogService.OpenAsync<EditPembelianPembayaran>($"Pembayaran",
                                      new Dictionary<string, object>() { { "IdPembelian", model.Id },{ "Total", (model.Total-model.TotalDiscount)- pembayarans.Sum(x=>x.PayValue) } },
                                      new DialogOptions())) Icon="add" ButtonStyle="ButtonStyle.Warning" />

                        <RadzenDataGrid class="my-2" @ref="pembayaranGrid" Data="@(pembayarans)" FilterMode="FilterMode.Advanced"
                        AllowFiltering="true"
                        AllowPaging="true" AllowSorting="true" TItem="PembayaranPembelian">
                            <Columns>
                                <RadzenDataGridColumn TItem="PembayaranPembelian" Property="PayDate" Title="Date">
                                    <EditTemplate Context="item">
                                        <RadzenDatePicker @bind-Value="item.PayDate" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="PembayaranPembelian" Property="PayTo" Title="Name">
                                    <EditTemplate Context="item">
                                        <RadzenTextBox @bind-Value="item.PayTo" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="PembayaranPembelian" Property="BankName" Title="Bank">
                                    <EditTemplate Context="item">
                                        <RadzenTextBox @bind-Value="item.BankName" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="PembayaranPembelian" Property="RekNumber" Title="Rekening">
                                    <EditTemplate Context="item">
                                        <RadzenTextBox @bind-Value="item.RekNumber" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="PembayaranPembelian" Property="Description" Title="Description" TextAlign="TextAlign.Right">
                                    <EditTemplate Context="item">
                                        <RadzenTextArea @bind-Value="item.Description" />
                                    </EditTemplate>
                                    <FooterTemplate>
                                        <div>Total</div>
                                        <div>Sisa</div>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="PembayaranPembelian" Title="Total" TextAlign="TextAlign.Right">
                                    <Template>
                                        @context.PayValue.ToString("N2");
                                    </Template>
                                    <EditTemplate Context="item">
                                        <RadzenNumeric @bind-Value="item.PayValue" Step="0.25" />
                                    </EditTemplate>
                                    <FooterTemplate>
                                        <div>@pembayarans.Sum(x => x.PayValue).ToString("N2")</div>
                                        <div>
                                            @{
                                                var sisa = (model.Total - model.TotalDiscount) - pembayarans.Sum(x => x.PayValue);
                                                @sisa.ToString("N2")
                                                ;
                                            }
                                        </div>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible=@((Int32)model.Status < 1) TItem="PembayaranPembelian" Context="sampleBlazorModelsSampleOrder"
                                Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                                    <Template Context="pembayaran">
                                        <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditPembayaranRow(pembayaran))">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="pembayaran">
                                        <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => SavePembayaranRow(pembayaran))">
                                        </RadzenButton>
                                        <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary"
                                        Click="@((args) => CancelPembayaranEdit(pembayaran))">
                                        </RadzenButton>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenFieldset>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>



    </div>
</div>



@code {

    [Parameter]
    public string id { get; set; }
    private Product product = new Product();
    private IEnumerable<Gudang> gudangs;
    private IEnumerable<Supplier> suppliers;
    private IEnumerable<ProductStock> products = new List<ProductStock>();
    private List<PembayaranPembelian> pembayarans = new List<PembayaranPembelian>();
    private Pembelian model = new Pembelian() { Items = new List<PembelianItem>() };
    RadzenDataGrid<PembelianItem> ordersGrid;
    RadzenDataGrid<PembayaranPembelian> pembayaranGrid;

    bool checkall;

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += CreatePembayaran;
        gudangs = await gudangService.Get();
        suppliers = await supplierService.GetSuppliers();
        if (!string.IsNullOrEmpty(id))
        {
            int paramId = Convert.ToInt32(id);
            if (paramId > 0)
            {
                this.model = await pembelianService.GetPembelian(paramId);

                if (model != null)
                {
                    pembayarans = (await pembelianService.GetPembayaran(model.Id)).ToList();
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Detail = "Pembelian Tidak Ditemikan!",
                            Duration = 3000,
                            Severity = NotificationSeverity.Error,
                            Summary = "Error"
                        });
                }
            }

        }
        var gudang = gudangs.FirstOrDefault();

        if (gudang != null)
        {
            model.Gudang = gudang;
            products = (await stockService.GetProductStocks(gudang.Id)).ToList();
        }

    }

    void OnCheckChange(bool data)
    {
        checkall = !checkall;

        foreach (var item in model.Items)
        {
            if (checkall)
                ordersGrid.EditRow(item);

            else
            {
                ordersGrid.UpdateRow(item);
            }
        }
    }

    private void RemoveItem(PembelianItem item)
    {
        model.Items.Remove(item);

    }

    private void Cancel()
    {
        model = new Pembelian();
        products = new List<ProductStock>();
    }

    private async Task Save(Pembelian model)
    {

        try
        {
            model.CreatedDate = DateTime.Now.ToUniversalTime();
            var result = await pembelianService.UpdatePembelian(model.Id, model);
            if (result != null)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "Pembelian Berhasil Disimpan !",
                        Duration = 3000
                    });
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 3000
                });
        }

    }

    async Task SelectProduct(object value, string name)
    {
        var prodId = (int)value;
        var _product = products.Where(x => x.Id == prodId).FirstOrDefault();
        if (_product != null && model.Items.Where(x => x.Product.Id == _product.Id).FirstOrDefault() == null)
        {
            var item = new PembelianItem { Product = _product, Amount = 1, Discount = _product.Discount };
            item.Unit = _product.Units.FirstOrDefault();
            if (model.Items == null)
                model.Items = new List<PembelianItem>();
            model.Items.Add(item);
        }


        product = new Product();
        await ordersGrid.Reload();
    }

    private async Task SelectUnit(object arg, PembelianItem product)
    {

        var unitId = (Int32)arg;
        var unit = product.Product.Units.Where(x => x.Id == unitId).FirstOrDefault();
        if (unit != null)
        {
            product.Unit = unit;
            product.Price = unit.Buy;
        }
        await Task.Delay(100);

        StateHasChanged();
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
        StateHasChanged();
    }

    private async void CreatePembayaran(dynamic parameter)
    {
        try
        {

            if (((object)parameter).GetType() != typeof(bool))
            {

                PembayaranPembelian data = (PembayaranPembelian)parameter;
                data.PayDate = data.PayDate.ToUniversalTime();

                if (data != null)
                {
                    var result = await pembelianService.CreatePembayaran(data.Pembelian.Id, data);
                    if (result == null)
                        throw new SystemException("Not Saved !");



                    pembayarans.Add(result);

                    if (pembayarans.Sum(x => x.PayValue) >= model.Total - model.TotalDiscount)
                        model.Status = PaymentStatus.Lunas;
                    else
                        model.Status = PaymentStatus.Panjar;

                    NotificationService.Notify(new NotificationMessage
                        {
                            Detail = "Pembayaran Berhasil Dibuat",
                            Duration = 3000,
                            Severity = NotificationSeverity.Success,
                            Summary = "Success"
                        });
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Detail = ex.Message,
                    Duration = 3000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });
        }
    }

    private async Task OnChangeOrderItem(object arg, PembelianItem item)
    {

        if (arg.GetType() == typeof(Int32))
        {
            var unitId = (Int32)arg;
            var unit = item.Product.Units.Where(x => x.Id == unitId).FirstOrDefault();
            if (unit != null)
            {
                item.Unit = unit;
                item.Price = unit.Buy;
            }
            await Task.Delay(100);
        }

        StateHasChanged();
    }

    void EditRow(PembelianItem item)
    {
        ordersGrid.EditRow(item);
    }

    void SaveRow(PembelianItem item)
    {
        ordersGrid.UpdateRow(item);
    }

    async Task CancelEdit(PembelianItem item)
    {
        model.Items.Remove(item);
        await ordersGrid.Reload();
    }

    void EditPembayaranRow(PembayaranPembelian item)
    {
        pembayaranGrid.EditRow(item);
    }

    async Task SavePembayaranRow(PembayaranPembelian item)
    {
        await Task.Delay(1000);
        if (await pembelianService.UpdatePembayaran(item))
        {
            await pembayaranGrid.UpdateRow(item);
            NotificationService.Notify(new NotificationMessage
                {
                    Detail = "Pembayaran Berhasil Diubah !",
                    Duration = 3000,
                    Severity = NotificationSeverity.Success,
                    Summary = "Success"
                });
        }
        else
        {
            pembayaranGrid.CancelEditRow(item);
            NotificationService.Notify(new NotificationMessage
                {
                    Detail = "Pembayaran Gagal Diubah !",
                    Duration = 3000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });
        }
    }

    void CancelPembayaranEdit(PembayaranPembelian item)
    {
        pembayaranGrid.CancelEditRow(item);
    }

    string OnErrorStock(PembelianItem data)
    {
        var prod = products.Where(x => x.Id == data.Product.Id).FirstOrDefault();
        if (model.Status == PaymentStatus.Belum && prod != null && (prod.Stock - (data.Amount * data.Unit.Quantity)) < 0)
        {
            return "red";
        }
        else
        {
            return "black";
        }
    }
}