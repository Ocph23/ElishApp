@page "/dialogpembelian/{IdPembelian}";

@attribute [Authorize]
@inject NotificationService NotificationService

@inject Radzen.DialogService dialogService;
<div class="row">
    <div class="col-md-12">
        <RadzenFieldset Text="Pembayaran">
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Payment Method" />
                </div>
                <div class="col-md-8">
                    <RadzenDropDown @bind-Value="Model.PayType"
                        Data=@(Enum.GetValues(typeof(PayType)).Cast<PayType>()) />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Account Name" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox @bind-Value="Model.PayTo" style="width: 100%;" Name="CardNr" />
                </div>
            </div>
            @if (Model.PayType != PayType.Tunai)
            {
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Bank Name" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="Model.BankName" style="width: 100%;" Name="CardNr" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Account Number" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="Model.RekNumber" style="width: 100%;" Name="CardNr" />
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Description" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea style="width: 100%;" @bind-Value="Model.Description" />
                </div>
            </div>


            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Total" />
                </div>
                <div class="col-md-8">
                    <RadzenNumeric TValue="double" style="width: 100%;" @bind-Value="Model.PayValue" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Paid Date" />
                </div>
                <div class="col-md-8">
                    <RadzenDatePicker style="width: 100%;" @bind-Value="Model.PayDate" />
                </div>
            </div>
        </RadzenFieldset>
    </div>
</div>
<div class="row">
    <div class="col-md-12 text-right" style="margin-top:20px; display:flex;justify-content:end">
        <RadzenButton Click="@(async (args) => await SaveAction())" Text="Simpan" Style="margin: 5px; width: 150px" />
        <RadzenButton Click="@((args) => dialogService.Close(false))" ButtonStyle="ButtonStyle.Danger" Text="Cancel"
            Style="margin: 5px; width: 150px" />
    </div>
</div>



@code {

    [Parameter]
    public int IdPembelian { get; set; }

    [Parameter]
    public double Total { get; set; }


    public PembayaranPembelian Model { get; set; }


    protected override Task OnInitializedAsync()
    {
        var id = Convert.ToInt32(IdPembelian);

        Model = new PembayaranPembelian() { Pembelian = new Pembelian { Id = id }, PayDate = DateTime.Now, PayValue = Total };
        StateHasChanged();
        return Task.CompletedTask;
    }



    Task SaveAction()
    {

        try
        {
            if ((Model.PayType != PayType.Tunai))
            {
                if (string.IsNullOrEmpty(Model.RekNumber) || string.IsNullOrEmpty(Model.PayTo) || string.IsNullOrEmpty(Model.BankName))
                {
                    throw new SystemException("Lengkapi Data Bank Pembayaran !");
                }
            }

            if (Model.PayType == PayType.Etc && string.IsNullOrEmpty(Model.PayTo))
                throw new SystemException("Account Name/Penerima Pembayaran tidak Boleh Kosong !");

            dialogService.Close(Model);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Detail = ex.Message,
                    Duration = 3000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });


        }
        return Task.CompletedTask;
    }




}
