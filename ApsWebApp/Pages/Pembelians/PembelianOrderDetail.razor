@page "/pembelian/order/detail/{id?}";
@using ShareModels
@using ApsWebApp.Services;

@attribute [Authorize]

@inject IMerkService merkService;
@inject ISupplierService supplierService;
@inject IPembelianService pembelianService;
@inject IProductService productService;
@inject NotificationService NotificationService;
@inject NavigationManager nav;
@inject Microsoft.AspNetCore.Hosting.IHostingEnvironment _env;

@inject IEmailService emailService

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="@(@title +"Order Pembelian")">
            <RadzenFieldset Text="Data Supplier">
                <div class="col-md-12  align-items-center d-flex">
                    <div class="col-md-6">

                        <div class="row" style="margin-top:5px">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Suplier" />
                            </div>
                            <div class="col-md-8">
                                <RadzenDropDown AllowClear="true" AllowFiltering="true" Style="width:90%"
                                                FilterCaseSensitivity="FilterCaseSensitivity.Default" Data=@suppliers @bind-Value=@model.Supplier
                                                TextProperty="Nama"
                                                Change=@(args => SelectSupplier(args, "Supplier")) />
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Status" Style="margin-top:5px" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextBox Disabled=true Value="@model.Status.ToString()" Style="margin-top:5px" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Keterangan" Style="margin-top:5px" />
                            </div>
                            <div class="col-md-8">
                                <RadzenTextArea @bind-Value="@model.Discription" Style="width:90%" />
                            </div>
                        </div>



                    </div>
                    <div class="col-md-6" style="text-align:right">
                        <RadzenButton Icon="download" Click="@(()=> nav.NavigateTo($"/report/OrderPembelianExcel/{model.Id}",true))"></RadzenButton>
                        <RadzenButton Icon="send" Click="@(async()=> await SendToSupplier(model.Id))"></RadzenButton>
                    </div>
                </div>
            </RadzenFieldset>

            <RadzenFieldset Text="Data Orders">
                <div class="row col-md-8">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Merek" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@merks
                                        @bind-Value=@merkId
                                        TextProperty="Name" ValueProperty="Id" Style="width:400px" />
                    </div>
                </div>
                <div class="row col-md-8">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Product" />
                    </div>
                    <div class="col-md-8">
                        <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@products.Where( item=> merkId<=0?true: item.Merk.Id==merkId && !model.Items.Any(data=> data.Product.Id.Equals(item.Id)))
                                        @bind-Value=@product
                                        TextProperty="CodeName"
                                        Change=@(args => SelectProduct(args, "Supplier")) Style="width:400px" />
                    </div>
                </div>

                <RadzenGrid @ref="ordersGrid" Data="@(model.Items)" AllowFiltering="true"
                            AllowSorting="true" TItem="OrderPembelianItem">
                    <Columns>
                        <RadzenGridColumn Width="180px" TItem="OrderPembelianItem" Property="Product.CodeName" Title="Code" />
                        <RadzenGridColumn TItem="OrderPembelianItem" Property="Product.Name" Title="Product" />
                        <RadzenGridColumn Width="100px" TItem="OrderPembelianItem" TextAlign="TextAlign.Right" Context="data" Property="Quntity" Title="Quntity">
                            <Template Context="item">
                                <RadzenNumeric TValue="double" @bind-Value="item.Quntity" Step="1" Change=@(args => OnChangeOrderItem(args, item)) />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="130px" TItem="OrderPembelianItem" Property="Unit.Name" Title="Unit">
                            <EditTemplate Context="item">
                                <RadzenDropDown @bind-Value="item.Unit" Data="@item.Product.Units"
                                                Change=@(args => OnChangeOrderItem(args, item))
                                                TextProperty="Name" Style="width:100%" />
                            </EditTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="100px" TItem="OrderPembelianItem" TextAlign="TextAlign.Right" Property="Price" Title="Price">
                            <EditTemplate Context="item">
                                <RadzenNumeric @bind-Value="item.Price" Step="0.25" />
                            </EditTemplate>
                            <Template Context="item">
                                @item.Price.ToString("N2")
                            </Template>
                            <FooterTemplate>
                                <div>Total</div>
                                <div>Discount</div>
                                <div>Total Payment </div>
                            </FooterTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="130px" TItem="OrderPembelianItem" Property="DiscountView" Title="Disc">
                            <EditTemplate Context="item">
                                <RadzenNumeric @bind-Value="item.Discount" Step="0.1" />
                            </EditTemplate>
                            <Template Context="item">
                                @item.DiscountView.ToString("N2")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="150px" TItem="OrderPembelianItem" Property="Total" TextAlign="TextAlign.Right" Title="Total">
                            <Template Context="item">
                                @item.Total.ToString("N2")
                            </Template>
                            <FooterTemplate>
                                @{
                                    <div>@((model.Total).ToString("N"))</div>
                                    <div>@((model.Items.Sum(x => x.DiscountView)).ToString("N"))</div>
                                    <div>@((model.Total - model.Items.Sum(x => x.DiscountView)).ToString("N"))</div>
                                }
                            </FooterTemplate>
                        </RadzenGridColumn>

                        <RadzenGridColumn TItem="OrderPembelianItem" Context="sampleBlazorModelsSampleOrder" Visible="@(model.Items.Count>0  && ((Int32)model.Status < 1))"
                                          Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                            <HeaderTemplate>
                                <RadzenCheckBox TValue="bool" ValueChanged="@((x)=>OnCheckChange(x))" />
                            </HeaderTemplate>
                            <Template Context="order">
                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="order">
                                <RadzenButton Icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Click="@((args) => SaveRow(order))">
                                </RadzenButton>
                                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger"
                                              Click="@((args) => CancelEdit(order))">
                                </RadzenButton>
                            </EditTemplate>

                            <FooterTemplate>
                                <RadzenButton Click=@(args => nav.NavigateTo("/pembelian")) Icon="cancel" ButtonStyle="ButtonStyle.Warning" />
                                <RadzenButton Visible="@(model.Items.Count>0  && ((Int32)model.Status < 1))" Click=@(args => Save(model)) Icon="save" ButtonStyle="ButtonStyle.Success" />
                            </FooterTemplate>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenFieldset>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>



@code {

    [Parameter]
    public string id { get; set; }

    string title;

    private Product product = new Product();
    private int merkId;
    private IEnumerable<Supplier> suppliers;
    private IEnumerable<Merk> merks;
    private IEnumerable<Product> products = new List<Product>();


    private OrderPembelian model = new OrderPembelian() { Items = new List<OrderPembelianItem>() };

    private RadzenGrid<OrderPembelianItem> ordersGrid;


    void OnCheckChange(bool check)
    {
        foreach (var item in model.Items)
        {
            if (check)
                ordersGrid.EditRow(item);

            else
            {
                ordersGrid.UpdateRow(item);
            }
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        suppliers = await supplierService.GetSuppliers();
        merks = await merkService.Get();
        if (!string.IsNullOrEmpty(id))
        {
            int paramId = Convert.ToInt32(id);
            if (paramId > 0)
            {
                this.model = await pembelianService.GetOrder(paramId);

                if (model != null)
                    products = await productService.GetProductsBySupplier(model.Supplier.Id);
            }

        }
        else
        {
            title = "Create";
        }

    }

    async Task SendToSupplier(int id)
    {
        var pembelian = model;
        string contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var logo = _env.WebRootPath + "/images/apslogo.png";

        var content = Helper.CreateFileOrderPembelian(contentType, pembelian, logo);
        var base64 = Convert.ToBase64String(content);
        var contactName = $"{pembelian.Supplier.Nama} ({pembelian.Supplier.ContactPersonName ?? " - "})";
        await emailService.SendEmailAsync(new Dictionary<string, string> { { pembelian.Supplier.Email, contactName } }, $"Order Pembelian : {pembelian.Nomor}",
            string.IsNullOrEmpty(pembelian.Discription) ? "" : pembelian.Discription ?? "", new List<Attachment>() { new Attachment { ContentType = contentType,
                        Filename = $"Order Pembelian No : {pembelian.Nomor}.xlsx", Base64Content = base64 } });

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Order Berhasil Dikirim Ke Supplier !",
                Duration = 3000
            });

    }

    async Task SelectSupplier(object value, string name)
    {
        var supplier = (Supplier)value;
        if (supplier != null)
        {
            model = new OrderPembelian() { Supplier = supplier, Items = new List<OrderPembelianItem>() };
            products = await productService.GetProductsBySupplier(supplier.Id);
        }
    }





    private void RemoveItem(OrderPembelianItem item)
    {
        model.Items.Remove(item);

    }
    private void Cancel()
    {
        model = new OrderPembelian();
        products = new List<Product>();
    }


    void EditRow(OrderPembelianItem item)
    {
        ordersGrid.EditRow(item);
    }
    void SaveRow(OrderPembelianItem item)
    {
        ordersGrid.UpdateRow(item);
    }

    async Task CancelEdit(OrderPembelianItem item)
    {
        model.Items.Remove(item);
        await ordersGrid.Reload();
    }


    private async Task Save(OrderPembelian model)
    {

        try
        {
            OrderPembelian result;
            if (model.Id <= 0)
            {
                model.OrderDate = DateTime.Now;
                result = await pembelianService.CreateOrder(model);
                if (result != null)
                    model.Id = result.Id;
            }
            else
            {
                result = await pembelianService.UpdateOrder(model.Id, model);
            }

            if (result != null)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "Order Berhasil Dibuat !",
                        Duration = 3000
                    });

                nav.NavigateTo("/pembelian/order");
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 3000
                });
        }

    }

    async Task SelectProduct(object value, string name)
    {
        var product = (Product)value;
        if (product != null)
        {
            var _product = products.Where(x => x.Id == product.Id).FirstOrDefault();
            if (_product != null && model.Items.Where(x => x.Product.Id == _product.Id).FirstOrDefault() == null)
            {
                var item = new OrderPembelianItem { Product = _product, Quntity = 1, Discount = product.Discount };
                item.Unit = _product.Units.OrderBy(x => x.Level).FirstOrDefault();
                if (model.Items == null)
                    model.Items = new List<OrderPembelianItem>();
                model.Items.Add(item);
            }
        }
        product = new Product();
        await ordersGrid.Reload();

    }




    private async Task OnChangeOrderItem(object arg, OrderPembelianItem item)
    {
        if (arg.GetType() == typeof(Unit))
        {
            var unit = (Unit)arg;
            if (unit != null)
            {
                item.Unit = unit;
                item.Price = unit.Buy;
            }
            await Task.Delay(100);
        }

        StateHasChanged();
    }


}
