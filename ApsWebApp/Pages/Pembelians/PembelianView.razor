@page "/pembelian/realisasi"

@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject ApplicationDbContext dbContext;
@inject IPembelianService pembelianService;
@inject NavigationManager nav;
@inject NotificationService NotificationService;
@inject NavigationManager Nav;

@attribute [Authorize]

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Data Realisasi Pembelian">
            <RadzenGrid Data="@pembelians"
                        AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" TItem="Pembelian" @ref="grid" LoadData="@LoadData" Count="@count" PageSize="10">
                <Columns>
                    <Radzen.Blazor.RadzenGridColumn Width="100px" TItem="Pembelian" Title="Created" Property="CreatedDate">
                        <Template Context="item">
                            @(item.CreatedDate.ToString("dd/MM/yyyy"))
                        </Template>
                    </Radzen.Blazor.RadzenGridColumn>
                    <Radzen.Blazor.RadzenGridColumn Width="190px" TItem="Pembelian" Title="INV" Property="Nomor" />
                    <Radzen.Blazor.RadzenGridColumn TItem="Pembelian" Title="Supplier" Property="Supplier.Nama">
                        <Template Context="item">
                            @(item.OrderPembelian.Supplier.Nama)
                        </Template>
                    </Radzen.Blazor.RadzenGridColumn>
                    <Radzen.Blazor.RadzenGridColumn Width="150px" TItem="Pembelian" Title="Invoice" Property="InvoiceNumber" />
                    <Radzen.Blazor.RadzenGridColumn Width="150px" TItem="Pembelian" Title="Total" TextAlign="TextAlign.Right">
                        <Template Context="item">
                            @(item.Total.ToString("N"))
                        </Template>
                    </Radzen.Blazor.RadzenGridColumn>
                    <Radzen.Blazor.RadzenGridColumn Width="100px" TItem="Pembelian" Title="DeadLine" Property="PayDeadLine">
                        <Template Context="item">
                            @(item.PayDeadLine.ToString("dd/MM/yyyy"))
                        </Template>
                    </Radzen.Blazor.RadzenGridColumn>
                    <Radzen.Blazor.RadzenGridColumn Width="110px" TItem="Pembelian" Title="Paid" Property="Status">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value="@currentPeyment" TextProperty="Text"
                                            ValueProperty="Value" Style="width:100%"
                                            Data="@(Enum.GetValues(typeof(PaymentStatus)).Cast<PaymentStatus>().Select(t => new { Text = $"{t}", Value = t }))" Change="@(()=>grid.Reload())" />
                        </FilterTemplate>
                    </Radzen.Blazor.RadzenGridColumn>
                    <Radzen.Blazor.RadzenGridColumn TItem="Pembelian" Width="65px">
                        <Template Context="item">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="list" Click=@(args => Nav.NavigateTo($"pembelian/realisasi/detail/{item.Id}")) />
                        </Template>
                    </Radzen.Blazor.RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>



@code{

    private IEnumerable<Pembelian> pembelians;
    PaymentStatus currentPeyment;
    RadzenGrid<Pembelian> grid;
    int count;

    private async Task CreatePembayaran(int idpembelian)
    {
        await Task.Delay(1);
    }


    async Task LoadData(LoadDataArgs args)
    {
        var query = dbContext.Pembelian
            .Include(x => x.Items)
            .Include(x => x.OrderPembelian)
            .ThenInclude(x => x.Supplier)
            .Include(x => x.Gudang)
            .OrderByDescending(x=>x.Id)
            .AsQueryable();

        if (currentPeyment != PaymentStatus.All)
            query = query.Where(x => x.Status == currentPeyment);

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        var result = query.ToList();
        count = result.Count();
        pembelians = result.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
        await InvokeAsync(StateHasChanged);
    }
}
