@page "/product/detail/{id?}";
@page "/product/add";

@attribute [Authorize]

@inject IProductService productService;
@inject NavigationManager nav;
@inject NotificationService NotificationService;
@inject ISupplierService supplierService;
@inject ICategoryService categoryService;
@inject IMerkService merkService;
@inject DialogService dialog;



<nav aria-label="breadcrumb">
    <div class="breadcrumb">
        <h3>Detail Product</h3>
    </div>
</nav>


<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Data Produk">
            <RadzenTemplateForm Data="model" Submit="@(async (Product prod)=> { await SaveProduct(model); })">
                <Radzen.Blazor.RadzenFieldset >
                    <div class="row">
                        <div class="col-md-6">
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Merk" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown @bind-Value="model.Merk" AllowClear="true" Placeholder="Select Merk"
                                                    Data="@merks" style="width: 95%;" TextProperty="Name" Name="merk">
                                    </RadzenDropDown>
                                </div>
                            </div>

                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Supplier" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown @bind-Value="model.Supplier" AllowClear="true" Placeholder="Select Supplier"
                                                    Data="@suppliers" style="width: 95%;" TextProperty="Nama" Name="SupplierId">
                                    </RadzenDropDown>
                                </div>
                            </div>

                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Code Product" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.CodeName" style="width: 95%;" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Product Name" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Name" style="width: 95%;" />
                                </div>
                            </div>



                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Barcode" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.CodeArticle" style="width: 95%;" />
                                </div>
                            </div>


                        </div>

                        <div class="col-md-6">

                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Size" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Size" style="width: 95%;" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Warna" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Color" style="width: 95%;" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Category" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    Data=@categories
                                                    @bind-Value=@model.Category
                                                    TextProperty="Name" style="width: 95%;" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Discount" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenNumeric @bind-Value="model.Discount" style="width: 95%;" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px">
                                <div class="col-md-4 align-items-center d-flex">
                                    <RadzenLabel Text="Description" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextArea @bind-Value="model.Description" style="width: 95%;" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div  style="margin:10px; display:flex; justify-content:end">
                        <Radzen.Blazor.RadzenButton Visible="!IsNew" Icon="undo" Click="@(()=>GoBack())" ButtonStyle="ButtonStyle.Info" Style="margin:5px" />
                        <Radzen.Blazor.RadzenButton Visible="IsNew" Icon="add" Click="@(()=>CreateNew())" ButtonStyle="ButtonStyle.Info" Style="margin:5px" />
                        <Radzen.Blazor.RadzenButton Icon="save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Warning" Style="margin:5px" />
                    </div>

                </Radzen.Blazor.RadzenFieldset>
                <hr />
            </RadzenTemplateForm>
        </RadzenTabsItem>
            <RadzenTabsItem Visible="model.Id > 0" Text="Harga Satuan">
                <RadzenFieldset Text="Satuan dan Harga Product">
                    <Radzen.Blazor.RadzenButton ButtonType="ButtonType.Button" class="btn btn-success" Click="@(()=>AddItem())" Icon="add" Style="margin-bottom:10px" />
                    <RadzenGrid @ref="unitGrid" Data="@(model.Units)" AllowFiltering="true"
                                AllowPaging="true" AllowSorting="true" TItem="Unit">
                        <Columns>
                            <RadzenGridColumn TItem="Unit" Property="Level" Title="Level" Width="75px">
                                <EditTemplate Context="item">
                                    <RadzenNumeric @bind-Value="item.Level" />
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Unit" Property="Quantity" TextAlign="TextAlign.Right" Width="75px" Title="Qty">
                                <EditTemplate Context="item">
                                    <RadzenNumeric @bind-Value="item.Quantity" />
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Unit" Property="Name" Title="Unit Name">
                                <Template Context="item">
                                    <RadzenTextBox @bind-Value="item.Name" />
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Unit" TextAlign="TextAlign.Right" Context="unit" Property="Buy" Title="Buy">
                                <Template>
                                    @unit.Buy.ToString("N")
                                </Template>
                                <EditTemplate Context="item">
                                    <RadzenNumeric @bind-Value="item.Buy" />
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Unit" Context="unit" TextAlign="TextAlign.Right" Property="Sell" Title="Sell">
                                <Template>
                                    @unit.Sell.ToString("N")
                                </Template>
                                <EditTemplate Context="item">
                                    <RadzenNumeric @bind-Value="item.Sell" />
                                </EditTemplate>
                            </RadzenGridColumn>

                            <RadzenGridColumn TItem="Unit" Context="sampleBlazorModelsSampleOrder"
                                              Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                                <Template Context="item">
                                    <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditUnit(item))">
                                    </RadzenButton>
                                </Template>
                                <EditTemplate Context="item">
                                    <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => SaveUnit(item))" ButtonStyle="ButtonStyle.Warning">
                                    </RadzenButton>
                                    <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Danger"
                                                  Click="@((args) => DeleteUnit(item))">
                                    </RadzenButton>
                                </EditTemplate>
                            </RadzenGridColumn>

                        </Columns>
                    </RadzenGrid>
                </RadzenFieldset>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>




         

            @code{
                [Parameter]
                public string id { get; set; }

                public Product model { get; set; }

                public IEnumerable<Merk> merks;
                public IEnumerable<Category> categories;
                public IEnumerable<Supplier> suppliers;
                public bool IsNew;

               // Category selectedCategory;

                List<ButtonLitleSave> components = new List<ButtonLitleSave>();

                RadzenGrid<Unit> unitGrid;

                ButtonLitleSave ComponentRef
                {
                    set { components.Add(value); }
                }

                protected override async Task OnInitializedAsync()
                {
                    suppliers = await supplierService.GetSuppliers();
                    categories = await categoryService.Get();
                    merks = await merkService.Get();

                    if (!string.IsNullOrEmpty(id))
                    {
                        var Id = Convert.ToInt32(id);
                        model = await productService.Get(Id);
                    }
                    else
                    {
                        IsNew = true;
                        model = new Product() { };
                    }
                }


                public void AddItem()
                {
                    if (model.Units == null)
                        model.Units = new List<Unit>();

                    var newUnit = new Unit { Quantity = 1, Level = model.Units.Count };
                    model.Units.Add(newUnit);
                    unitGrid.EditRow(newUnit);
                    unitGrid.Reload();
                }

                public void OnChange(int id)
                {
                    var com = components.Where(x => x.unit.Id == id).FirstOrDefault();
                    if (com != null)
                    {
                        com.OnChange();
                    }
                }

                public async Task SaveProduct(Product prod)
                {
                    try
                    {
                        var saved = false;
                        if (model.Id > 0)
                        {
                            var Id = Convert.ToInt32(id);
                            saved = await productService.Update(Id, model);

                        }
                        else
                        {
                            var result = await productService.AddProduct(model.Supplier.Id, model);
                            if (result != null)
                                saved = true;

                        }

                        if (saved)
                            NotificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Summary = "Success",
                                Detail = "Data Berhasil Disimpan !",
                                Duration = 3000
                            });

                        else
                            throw new SystemException("Data Not Saved !");
                    }
                    catch (System.Exception ex)
                    {
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 3000
                        });
                    }
                }

                public void CreateNew()
                {
                    var newModel = new Product() { Supplier = model.Supplier, Merk = model.Merk, Category = model.Category };
                    model = newModel;
                }


                public void GoBack()
                {
                    nav.NavigateTo($"/product");
                }


                protected async Task OnButtonClickHandler(ChangeEventArgs e)
                {
                    var paramss = (object[])e.Value;
                    var btn = (ButtonLitleSave)paramss[0];
                    var unit = (Unit)paramss[1];
                    btn.IconName = "support";
                    btn.IconStyle = "loader";
                    Unit temUnit;
                    if (unit.Id > 0)
                    {
                        temUnit = await productService.UpdateUnit(unit.Id, unit);
                    }
                    else
                    {
                        temUnit = await productService.AddUnit(model.Id, unit);
                        if (temUnit != null)
                        {
                            unit = temUnit;
                        }
                    }

                    if (temUnit != null)
                    {
                        btn.IconName = "check_circle";
                        btn.IconStyle = "iconSuccess";
                    }
                    else
                    {
                        btn.IconName = "error_outline";
                        btn.IconStyle = "iconError";
                    }

                    await Task.Delay(4000);
                    btn.IconName = "";
                    btn.IconStyle = "";
                    StateHasChanged();
                }

                async Task SaveUnit(Unit unit)
                {
                    try
                    {
                        Unit temUnit;
                        if (unit.Id > 0)
                        {
                            temUnit = await productService.UpdateUnit(unit.Id, unit);

                        }
                        else
                        {
                            temUnit = await productService.AddUnit(model.Id, unit);
                            if (temUnit != null)
                            {
                                unit = temUnit;
                            }
                        }

                        await unitGrid.UpdateRow(unit);

                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = "Data Berhasil Disimpan !",
                            Duration = 3000
                        });

                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 3000
                        });
                    }
                }

                async Task DeleteUnit(Unit unit)
                {

                    var resultDialog = await dialog.Confirm("Yakin Hapus Data Unit ? ", "Hapus Unit", new ConfirmOptions { OkButtonText = "Ya", CancelButtonText = "Tidak" });
                    if (resultDialog != null && resultDialog == true)
                    {
                        await unitGrid.UpdateRow(unit);
                        if (unit.Id > 0)
                        {
                            bool removed = await productService.RemoveUnit(unit.Id);
                        }
                        model.Units.Remove(unit);
                        await unitGrid.Reload();
                    }
                }


                void EditUnit(Unit item)
                {
                    unitGrid.EditRow(item);
                }

                void CancelUnit(Unit item)
                {
                    unitGrid.CancelEditRow(item);
                }



            }
